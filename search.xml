<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法 | 矩阵</title>
      <link href="2021/04/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95-%E7%9F%A9%E9%98%B5/"/>
      <url>2021/04/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95-%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h5 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">二维数组中的查找</a></h5><hr><p><strong>题目：</strong>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><strong>示例：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid2.jpg"></p><pre class="line-numbers language-none"><code class="language-none">输入：matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5输出：true限制：0 &lt;= n &lt;= 10000 &lt;= m &lt;= 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题解：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">findNumberIn2DArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>            y<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>            x<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>时间复杂度：<span class="token constant">O</span><span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token punctuation">)</span>思路：——从右上角为起点的话可以把矩阵看成二叉查找树——如果从右上角开始走：若当前位置元素比target小，则row<span class="token operator">++</span>；   若当前位置元素比target大，则col<span class="token operator">--</span>；   若如果相等，返回<span class="token boolean">true</span>；   如果越界了还没找到，说明不存在，返回<span class="token boolean">false</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS之数据结构与算法 | 四</title>
      <link href="2021/03/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/JS%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-4/"/>
      <url>2021/03/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/JS%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-4/</url>
      
        <content type="html"><![CDATA[<h4 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h4><hr><h5 id="要点："><a href="#要点：" class="headerlink" title="要点："></a>要点：</h5><ul><li><p>分而治之是算法设计中的一种方法</p></li><li><p>它将一个问题<strong>分</strong>成多个和原问题相似的小问题，<strong>递归解决</strong>小问题，再将结果<strong>合并</strong>以解决原来的问题</p></li><li><p>归并排序，快速排序中都有分而治之的思想</p></li></ul><h5 id="相关算法题"><a href="#相关算法题" class="headerlink" title="相关算法题"></a>相关算法题</h5><ul><li><p><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/">猜数字大小</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">guessNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token function-variable function">rec</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">guess</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">rec</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">rec</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">rec</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//这是第二次写本题，这次是利用分治而之的“分——递归——合”的思想来解答该题</span><span class="token comment">//该方法实现的空间复杂度为O(logN)，而二分搜索实现的空间复杂度为O(1)，所以在此情况下该方法不建议使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://leetcode-cn.com/problems/invert-binary-tree/">翻转二叉树</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        val<span class="token operator">:</span> root<span class="token punctuation">.</span>val<span class="token punctuation">,</span>        left<span class="token operator">:</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span>        right<span class="token operator">:</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//先翻转左右子树，再将子树换个位置。符合“分、解、合”特性</span><span class="token comment">//时间复杂度为o(n),空间复杂度为o(h)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://leetcode-cn.com/problems/same-tree/">相同的树</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">isSameTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> q <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>val <span class="token operator">===</span> q<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span> q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span> q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//分：获取两个数的左子树和右子树。解：递归地判断两个数地左子树是否相同，右子树是否相同。合：将上述结果合并，如果根节点地值也相同，数就相同。</span><span class="token comment">//时间复杂度O(n)n为树地节点数；最坏情况下空间复杂度也为O(n)，最好情况下为o(logn),即为完整二叉树时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://leetcode-cn.com/problems/symmetric-tree/">对称二叉树</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">isSymmetric</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">rec</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">.</span>val <span class="token operator">===</span> r<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span>            <span class="token function">rec</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>left<span class="token punctuation">,</span> r<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">rec</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>right<span class="token punctuation">,</span> r<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">rec</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//递归地判断树1的左子树和树2的右子树是否镜像，树1的右子树和树2的左子树是否镜像</span><span class="token comment">//时间复杂度O(n(节点数))，空间复杂度O(n)或者O(logn)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><hr><h5 id="要点：-1"><a href="#要点：-1" class="headerlink" title="要点："></a>要点：</h5><ul><li>动态规划是算法设计中的一种方法</li><li>它将一个问题分界为<strong>相互重叠</strong>的子问题，通过反复求解子问题，来解决原来的问题</li><li>动态规划的步骤：①定义子问题。②反复执行子问题</li></ul><h5 id="动态规划和分而治之的区别"><a href="#动态规划和分而治之的区别" class="headerlink" title="动态规划和分而治之的区别"></a>动态规划和分而治之的区别</h5><p>如果子问题是<strong>相互独立</strong>的是分而治之，如果子问题是<strong>相互重叠</strong>的是动态规划。</p><h5 id="相关算法题-1"><a href="#相关算法题-1" class="headerlink" title="相关算法题"></a>相关算法题</h5><ul><li><p>爬楼梯</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//爬到第n阶可以在第n-1阶爬一个台阶或在第n-2阶爬2个台阶。</span><span class="token comment">//F(n) = F(n-1) + F(n-2)</span><span class="token comment">//时间复杂度O(n),空间复杂度O(n)</span><span class="token comment">//优化版，不使用数组，使空间复杂度变为o(1)</span><span class="token keyword">var</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">let</span> dp0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dp1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> temp <span class="token operator">=</span> dp0<span class="token punctuation">;</span>        dp0 <span class="token operator">=</span> dp1<span class="token punctuation">;</span>        dp1 <span class="token operator">=</span> temp <span class="token operator">+</span> dp1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://leetcode-cn.com/problems/house-robber/">打家劫舍</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">rob</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dp0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dp1 <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp0 <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp1<span class="token punctuation">)</span><span class="token punctuation">;</span>        dp0 <span class="token operator">=</span> dp1<span class="token punctuation">;</span>        dp1 <span class="token operator">=</span> dp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//f(k) = max(f(k-2) + A(k), f(k-1))</span><span class="token comment">//f(k):从前k个房屋中能偷窃到的最大数额</span><span class="token comment">//A(k):第k个房屋的钱数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><hr><h5 id="要点：-2"><a href="#要点：-2" class="headerlink" title="要点："></a>要点：</h5><ul><li>贪心算法是算法设计中的一种方法</li><li>期盼通过每个阶段的<strong>局部最优</strong>选择，从而达到全局的最优</li><li>结构并<strong>不一定是最优</strong></li></ul><h5 id="相关算法题-2"><a href="#相关算法题-2" class="headerlink" title="相关算法题"></a>相关算法题</h5><ul><li><p><a href="https://leetcode-cn.com/problems/assign-cookies/">分发饼干</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">findContentChildren</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">g<span class="token punctuation">,</span> s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token function-variable function">sortFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    g<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> g<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//局部最优：既能满足孩子，还消耗最少。先将较小的饼干分给胃口最小的孩子</span><span class="token comment">//时间复杂度为O(n*logn),空间复杂度O(1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/">买卖股票的最佳时机 II</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">maxProfit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prices</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sold <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sold <span class="token operator">=</span> sold <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sold<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//我们有上帝视角，只需在今天比较昨天的价格，今天价格比昨天高，就在昨天买今天卖</span><span class="token comment">//时间复杂度O(n), 空间复杂度O(1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h4><hr><h5 id="要点：-3"><a href="#要点：-3" class="headerlink" title="要点："></a>要点：</h5><ul><li>回溯算法是算法设计中的一种方法</li><li>回溯算法是一种渐进式寻找并构建问题解决方式的策略</li><li>回溯算法会先从一个可能的动作开始解决问题，如果不行，就回溯并选择另一个动作，直到将问题解决。</li></ul><h5 id="什么问题适合回溯算法解决？"><a href="#什么问题适合回溯算法解决？" class="headerlink" title="什么问题适合回溯算法解决？"></a>什么问题适合回溯算法解决？</h5><ul><li>有很多“路”</li><li>这些“路中”，有“死路”，也有“出路”</li><li>通常需要递归来模拟所有的“路”</li></ul><h5 id="相关算法题-3"><a href="#相关算法题-3" class="headerlink" title="相关算法题"></a>相关算法题</h5><ul><li><p><a href="https://leetcode-cn.com/problems/permutations/">全排列</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//用递归模拟出所有情况，遇到包含重复元素的情况，就回溯。最后收集所有到达递归终点的情况，并返回。</span><span class="token comment">//时间复杂度O(n!),空间复杂度O(n)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://leetcode-cn.com/problems/subsets/">子集</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">subsets</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">backtrack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length  <span class="token operator">||</span> path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//利用递归的思想模拟出所有情况，遇到重复元素或者非当前元素之后的元素，就回溯。最后搜集所有到达递归终点的情况，并返回。</span><span class="token comment">//时间复杂度O(2^n),因为每个元素都有两种可能，存在或不存在。空间复杂度O(n)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><hr><h5 id="重点难点"><a href="#重点难点" class="headerlink" title="重点难点"></a>重点难点</h5><ul><li>数据结构：所有的数据结构都很重要，跟前端最相关的是链表和树</li><li>算法：链表、树、图的遍历、数组的排序和搜索</li><li>设计思想：分而治之、动态规划比较常考，贪心、回溯次之</li></ul><h5 id="经验心得"><a href="#经验心得" class="headerlink" title="经验心得"></a>经验心得</h5><ul><li>搞清楚数据结构预算法的特点和应用场景</li><li>学会分析时间/空间复杂度</li><li>提炼前端和算法的结合点，用于工作实战</li></ul><h5 id="给自己的一点建议"><a href="#给自己的一点建议" class="headerlink" title="给自己的一点建议"></a>给自己的一点建议</h5><ul><li>多刷题</li><li>在刷题过程中多思考、总结</li><li>多实战，将数据结构于算法应用于项目中</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分而治之 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 贪心算法 </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS之数据结构与算法 | 三</title>
      <link href="2021/03/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/JS%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-3/"/>
      <url>2021/03/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/JS%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-3/</url>
      
        <content type="html"><![CDATA[<h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><hr><h5 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h5><ul><li>堆是一种特殊的<strong>完全二叉树</strong></li><li>所有的节点都大于等于（最大堆）或小于等于（最小堆）他的子节点</li><li>JS中通常用数组表示堆</li><li>任意节点左侧子节点的位置是2 * index + 1，右侧子节点的位置是2 * index + 2，父节点的位置是(index - 1)/2</li></ul><p><a href="https://image.flamingow.cn/image/F8U"><img src="https://image.flamingow.cn/images/2021/03/18/JS.png"></a></p><h5 id="堆的应用"><a href="#堆的应用" class="headerlink" title="堆的应用"></a>堆的应用</h5><ul><li><p>堆能高效、快速地找出最大值和最小值，时间复杂度为O(1)</p></li><li><p>找出第K个最大/小元素（最小堆/最大堆）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//js实现最小堆类</span><span class="token keyword">class</span> <span class="token class-name">MinHeap</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment">// 替换两个节点值</span>    <span class="token function">swap</span> <span class="token punctuation">(</span><span class="token parameter">i1<span class="token punctuation">,</span> i2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取父节点</span>    <span class="token function">getParentIndex</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//求除2的商</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取左节点</span>    <span class="token function">getLeftIndex</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//求除2的商</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取右节点</span>    <span class="token function">getRightIndex</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//求除2的商</span>    <span class="token punctuation">}</span>    <span class="token comment">// 上移</span>    <span class="token function">shiftUp</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">const</span> parentIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParentIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span>parentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 下移</span>    <span class="token function">shiftDown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> leftIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLeftIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> rightIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRightIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>leftIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span>rightIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 插入</span>    <span class="token function">insert</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 删除堆顶</span>    <span class="token function">pop</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shiftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取堆顶</span>    <span class="token function">peek</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取堆的大小</span>    <span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heap<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="图"><a href="#图" class="headerlink" title="图"></a>图</h4><hr><h5 id="要点："><a href="#要点：" class="headerlink" title="要点："></a>要点：</h5><ul><li>图是网络结构的抽象模型，是一组由边连接的节点</li><li>图可以表示任何二元关系，比如道路、航班……</li></ul><h5 id="一些常见的图"><a href="#一些常见的图" class="headerlink" title="一些常见的图"></a>一些常见的图</h5><ul><li>邻接矩阵</li></ul><p><a href="https://image.flamingow.cn/image/IMo"><img src="https://image.flamingow.cn/images/2021/03/23/76f910650789d8ccc822edd30ec5913c.png"></a></p><ul><li>邻接表</li></ul><p><a href="https://image.flamingow.cn/image/qRV"><img src="https://image.flamingow.cn/images/2021/03/23/22b096aefc6da997ca85c17ea7cc5abd.png"></a></p><h5 id="图的深度优先遍历和广度优先遍历"><a href="#图的深度优先遍历和广度优先遍历" class="headerlink" title="图的深度优先遍历和广度优先遍历"></a>图的深度优先遍历和广度优先遍历</h5><ul><li><p>深度优先遍历</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//访问根节点</span><span class="token comment">//对根节点的没访问过的相邻节点挨个进行深度优先遍历</span><span class="token comment">//创建一个图</span><span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">//深度优先遍历</span><span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    garph<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//从2这个节点开始遍历</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出2，0，1，3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>广度优先遍历</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//新建一个队列，把根节点入队</span><span class="token comment">//把队头出队并访问</span><span class="token comment">//把队头没访问过的相邻节点入队</span><span class="token comment">//重复2、3步骤，直到队列为空</span><span class="token keyword">const</span> <span class="token function-variable function">bfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> n <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>b    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//将2为根节点开始遍历</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出2，0，3，1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="相关算法题"><a href="#相关算法题" class="headerlink" title="相关算法题"></a>相关算法题</h5><ul><li>有效的数字</li></ul><p><a href="https://image.flamingow.cn/image/lQr"><img src="https://image.flamingow.cn/images/2021/03/23/leecode-_graph.png"></a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">isNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 构件图(根据上图所示构建邻接表)</span>    <span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment">// 'sign' 表示加减号  'digit' 表示数字</span>        <span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'blank'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'sign'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'digit'</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'digit'</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'digit'</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'digit'</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">4</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'digit'</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'sign'</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">5</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'digit'</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">6</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'digit'</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">7</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'digit'</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// 当前字符串状态，默认为0</span>    <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 遍历字符串,注意：E、e都是有效的，而图中只有e，所以将字符转全部变为小写</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token keyword">of</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c <span class="token operator">=</span> <span class="token string">'digit'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c <span class="token operator">=</span> <span class="token string">'blank'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'+'</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            c <span class="token operator">=</span> <span class="token string">'sign'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        state <span class="token operator">=</span> graph<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">||</span> state <span class="token operator">===</span> <span class="token number">5</span> <span class="token operator">||</span> state <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//时间复杂度O(n),空间复杂度O(1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="排序和搜索"><a href="#排序和搜索" class="headerlink" title="排序和搜索"></a>排序和搜索</h4><hr><h5 id="排序——sort"><a href="#排序——sort" class="headerlink" title="排序——sort()"></a>排序——sort()</h5><hr><h5 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h5><ul><li>排序：把某个乱序的数组变成升序或者降序的数组</li><li>搜索：找出数组中某个元素的下标</li></ul><h5 id="JS中的图"><a href="#JS中的图" class="headerlink" title="JS中的图"></a>JS中的图</h5><ul><li>JS中没有图，但是可以用Object和Array构建图</li><li>图的表示法：邻接矩阵、邻接表、关联矩阵……</li></ul><h5 id="JS中的排序和搜索"><a href="#JS中的排序和搜索" class="headerlink" title="JS中的排序和搜索"></a>JS中的排序和搜索</h5><ul><li>JS中的排序：数组的sort方法</li><li>JS中的搜索：数组的indexOf方法</li></ul><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><ul><li>比较所有相邻元素，如果第一个比第二个大，则交换他们</li><li>一轮下来，可以保证最后一个树是最大的</li><li>执行n - 1轮，就可以完成排序</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bubbleSort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时间复杂度O(n*n)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h5><ul><li>找到数组中的最小值，选中它并将其放在第一位</li><li>接着找到第二小的值，选中它并将其放置在第二位</li><li>以此类推，执行n - 1</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">selectionSort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> indexMin <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">[</span>indexMin<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                indexMin <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>indexMin <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>indexMin<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span>indexMin<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时间复杂度O(n*n)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><ul><li>从第二个数往前比</li><li>比它大就往后排</li><li>以此类推进行到最后一个数</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">insertionSort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时间复杂度O(n*n)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h5><ul><li>分：把数组劈成两半，再递归地对子数组进行“分”操作，直到分成一个个单独地数。</li><li>合：把两个数组合并为有序数组，再对有序数组进行合并，直到全部子数组合并为一个完整数组。<ul><li>新建一个空数组res，用于存放最终排序后的数组。</li><li>比较两个有序数组的头部，较小者出队并推入res中。</li><li>如果两个数组还有值，就重复第二步。</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">margeSort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token function-variable function">rec</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> left <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> orderLeft <span class="token operator">=</span> <span class="token function">rec</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> orderRight <span class="token operator">=</span> <span class="token function">rec</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//至此“分”的操作已完成，以下为合并操作</span>        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>orderLeft<span class="token punctuation">.</span>length <span class="token operator">||</span> orderRight<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>orderLeft<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> orderRight<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>orderLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> orderRight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> orderLeft<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> orderRight<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderLeft<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>orderLeft<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderRight<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>orderRight<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// console.log(res);</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">rec</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">margeSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分的时间复杂度为O(logN)，二分的操作都可以联想一下logN；</span><span class="token comment">//合的时间复杂度是O(n)；</span><span class="token comment">//所以归并排序的时间复杂度是O(logN*n)。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h5><ul><li>分区：从数组中任意选择一个“基准”，所有比基准小的元素放在基准前面，比基准大的元素放在基准的后面</li><li>递归：递归地对基准前后的子数组进行分区</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token function-variable function">rec</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> mid <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">rec</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">rec</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">rec</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归的时间复杂度为O(logN)</span><span class="token comment">//分区的时间复杂度是O(n)</span><span class="token comment">//则快速排序的时间复杂度为O(n*logN)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="搜索——indexOf"><a href="#搜索——indexOf" class="headerlink" title="搜索——indexOf()"></a>搜索——indexOf()</h5><hr><h5 id="顺序搜索"><a href="#顺序搜索" class="headerlink" title="顺序搜索"></a>顺序搜索</h5><ul><li>遍历数组</li><li>找到跟目标值相等的元素，就返回它的下标</li><li>遍历结束后，如果没有搜索到目标值，就返回-1</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sequentialSearch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sequentialSearch</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历数组是一个循环操作</span><span class="token comment">//时间复杂度O(n)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h5><ul><li>从数组的中间元素开始，如果中间元素正好是目标值，则搜索结束</li><li>如果目标值大于或者小于中间元素，则在大于或小于中间元素的那一半数组中搜索</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">binarySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&gt;</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每一次比较都使搜索范围缩小一半</span><span class="token comment">//所以二分搜索的时间复杂度为O(logN)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="相关算法题-1"><a href="#相关算法题-1" class="headerlink" title="相关算法题"></a>相关算法题</h5><ul><li><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">合并两个有序链表</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">mergeTwoLists</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> l1<span class="token punctuation">;</span>    <span class="token keyword">let</span> p2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">&amp;&amp;</span> p2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//在链表中实现归并排序中“并”的部分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/">猜数字大小</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">guessNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">guess</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//二分搜索思路</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>s</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆 </tag>
            
            <tag> 图 </tag>
            
            <tag> 排序与搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS之数据结构与算法 | 二</title>
      <link href="2021/03/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/JS%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-2/"/>
      <url>2021/03/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/JS%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-2/</url>
      
        <content type="html"><![CDATA[<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><hr><h5 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h5><ul><li>一种<strong>无序</strong>且<strong>唯一</strong>的数据结构</li><li>ES6中有集合，名为Set</li><li>集合的常用操作：去重、判断元素是否在集合中、求交集……</li></ul><h5 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//去重</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,2]</span><span class="token comment">//判断元素是否在集合中</span><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> has <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>has<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token comment">//求交集</span><span class="token keyword">const</span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> set3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> set2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[2]</span><span class="token comment">//求差集,也就是求set2里面没有而set里面有的值</span><span class="token keyword">const</span> set4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>set2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Javascript与集合"><a href="#Javascript与集合" class="headerlink" title="Javascript与集合"></a>Javascript与集合</h5><ul><li><p>集合的增删查</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//add()方法可以往集合内添加元素，原始值是唯一得，索引值得的地址也是唯一的</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//has()方法可以查看集合中是否存在某个元素</span><span class="token keyword">const</span> has <span class="token operator">=</span> mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token comment">//delete()方法可以删除集合中的某个元素</span>mySet<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>集合的迭代</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//利用for of，和集合的value()或者key()方法，下面的value()可以换为key(),两者返回的值都是一样的</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> mySet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Set与Array的互转</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Set→Array</span><span class="token keyword">const</span> myArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>mySet<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> myArr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Array→Set</span><span class="token keyword">const</span> mySet2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="相关算法题"><a href="#相关算法题" class="headerlink" title="相关算法题"></a>相关算法题</h5><ul><li><p><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/">两个数组的交集</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param {number[]} nums1 * @param {number[]} nums2 * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">intersection</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// const set1 = new Set(nums1);</span>    <span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//解题思路：利用数组的filter方法和Set的has方法可直接得到结果</span><span class="token comment">//也可以直接用数组的includes方法：</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> nums2<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><hr><h5 id="要点："><a href="#要点：" class="headerlink" title="要点："></a>要点：</h5><ul><li>与集合类似，字典也是一种存储唯一值的数据结构，但是它是以<strong>键值对</strong>的形式来存储</li><li>ES6中有字典的数据结构，名为Map</li><li>字典的常用操作：键值对的增删改查</li></ul><h5 id="字典的常用操作"><a href="#字典的常用操作" class="headerlink" title="字典的常用操作"></a>字典的常用操作</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//创建一个字典</span><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//'b'</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token comment">//删</span>m<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除字典中所有的键值对</span>m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//改</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><hr><h5 id="要点：-1"><a href="#要点：-1" class="headerlink" title="要点："></a>要点：</h5><ul><li>一种分层数据的抽象模型</li><li>前端工作中常见的树包括：DOM树、级联选择、树形空间……</li><li>JS中没有树，但是可以用Object和Array构建树。</li></ul><h5 id="树的深度优先遍历"><a href="#树的深度优先遍历" class="headerlink" title="树的深度优先遍历"></a>树的深度优先遍历</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token punctuation">{</span>    val<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            val<span class="token operator">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    val<span class="token operator">:</span> <span class="token string">'d'</span><span class="token punctuation">,</span>                    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    val<span class="token operator">:</span> <span class="token string">'e'</span><span class="token punctuation">,</span>                    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            val<span class="token operator">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    val<span class="token operator">:</span> <span class="token string">'f'</span><span class="token punctuation">,</span>                    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    val<span class="token operator">:</span> <span class="token string">'g'</span><span class="token punctuation">,</span>                    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>dfs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">dfs</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="树的广度优先遍历"><a href="#树的广度优先遍历" class="headerlink" title="树的广度优先遍历"></a>树的广度优先遍历</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token punctuation">{</span>    val<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            val<span class="token operator">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    val<span class="token operator">:</span> <span class="token string">'d'</span><span class="token punctuation">,</span>                    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    val<span class="token operator">:</span> <span class="token string">'e'</span><span class="token punctuation">,</span>                    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            val<span class="token operator">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    val<span class="token operator">:</span> <span class="token string">'f'</span><span class="token punctuation">,</span>                    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    val<span class="token operator">:</span> <span class="token string">'g'</span><span class="token punctuation">,</span>                    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">bfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> n <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">bfs</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h5><ul><li>树的每个节点最多能有两个子节点</li><li>在JS中通常用Object来模拟二叉树</li></ul><h5 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h5><ul><li><p>创建一个二叉树：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> bt <span class="token operator">=</span> <span class="token punctuation">{</span>    val<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    left<span class="token operator">:</span> <span class="token punctuation">{</span>        val<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        left<span class="token operator">:</span> <span class="token punctuation">{</span>            val<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            left<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        right<span class="token operator">:</span> <span class="token punctuation">{</span>            val<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            left<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    right<span class="token operator">:</span> <span class="token punctuation">{</span>        val<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        left<span class="token operator">:</span> <span class="token punctuation">{</span>            val<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            left<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        right<span class="token operator">:</span> <span class="token punctuation">{</span>            val<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>            left<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>先序遍历</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//思路： （根、左、右）</span><span class="token comment">//访问根节点</span><span class="token comment">//对根节点的左子树进行先序遍历</span><span class="token comment">//对根节点的右子树进行先序遍历</span><span class="token comment">//递归</span><span class="token keyword">const</span> <span class="token function-variable function">preorder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//非递归</span><span class="token keyword">const</span> <span class="token function-variable function">preorder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> n <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//由于栈是后进先出，所以左节点后进</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">preorder</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>中序遍历</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//思路 （左、根、右）</span><span class="token comment">//对根节点的左子树进行中序遍历</span><span class="token comment">//访问根节点</span><span class="token comment">//对根节点的右子树进行中序遍历</span><span class="token comment">//递归</span><span class="token keyword">const</span> <span class="token function-variable function">inorder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//非递归</span><span class="token keyword">const</span> <span class="token function-variable function">inorder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">||</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> n <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> n<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">inorder</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后序遍历</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//思路 （左、右、根）</span><span class="token comment">//对根节点的左子树进行后续遍历</span><span class="token comment">//对根节点的右子树进行后续遍历</span><span class="token comment">//访问根节点</span><span class="token comment">//递归</span><span class="token keyword">const</span> <span class="token function-variable function">postorder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//非递归</span><span class="token keyword">const</span> <span class="token function-variable function">postorder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">const</span> outputStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> n <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>outputStack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> n <span class="token operator">=</span> outputStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">postorder</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="前端与树"><a href="#前端与树" class="headerlink" title="前端与树"></a>前端与树</h5><ul><li><p>遍历JSON的所有节点值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    d<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Object.keys 返回一个所有元素为字符串的数组，其元素来自于从给定的object上面可直接枚举的属性。这些属性的顺序与手动遍历该对象属性时的一致。</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">k</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">dfs</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在前端的日常工作中，很多时候会出现后端传过来的数据“不纯”，需要我将数据整理一下，比如增加某个节点或者删除某个节点，这个时候一般就会用到深度优先遍历来处理数据。</p></blockquote></li><li><p>渲染Antd中的树组件</p></li></ul><h5 id="相关算法题-1"><a href="#相关算法题-1" class="headerlink" title="相关算法题"></a>相关算法题</h5><ul><li><p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">二叉树的最大深度</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>二叉树的最小深度</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">minDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>root<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>n<span class="token punctuation">,</span>height<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> height<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>left<span class="token punctuation">,</span>height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>right<span class="token punctuation">,</span>height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//利用广度优先算法，若遍历到叶子节点（即没左右子节点的节点），则直接返回该叶子节点所在层数即可。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">二叉树的层序遍历</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">levelOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">[</span>n<span class="token punctuation">,</span> height<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">[</span>height<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            res<span class="token punctuation">[</span>height<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>left<span class="token punctuation">,</span> height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>right<span class="token punctuation">,</span> height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//使用广度优先遍历并记录每个元素所在层级，然后将相同层级的元素push进一个数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>二叉树的中序遍历</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//递归版，较简单</span><span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">inorder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//迭代版，稍复杂，建议断点调试多看看</span><span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">||</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> n <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> n<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://leetcode-cn.com/problems/path-sum/">二叉树的路径总和</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">hasPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>n<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> s <span class="token operator">===</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">{</span>            res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">,</span> s <span class="token operator">+</span> n<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">,</span> s <span class="token operator">+</span> n<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路：核心是深度优先遍历，在遍历每个节点时，记录下当前节点的路径总和，当遍历到叶子节点时，判断此时路径总和是否为targetSum</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> 字典 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS之数据结构与算法 | 一</title>
      <link href="2021/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/JS%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-1/"/>
      <url>2021/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/JS%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-1/</url>
      
        <content type="html"><![CDATA[<h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><hr><h5 id="要点："><a href="#要点：" class="headerlink" title="要点："></a>要点：</h5><ul><li>栈式一个<strong>后进先出</strong>的数据结构</li><li>JavaScript中没有栈，但可以用Array实现栈的所有功能</li><li>栈常用操作：<ul><li><code>push()</code>：进栈</li><li><code>pop()</code>：出栈，返回出来的元素</li><li><code>stack[stack.length-1]</code>：查看栈顶元素</li></ul></li></ul><h5 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h5><p>需要<strong>后进先出</strong>的场景，比如：十进制转二进制、判断字符串的括号是否有效、函数调用堆栈……等一系列只要是后进先出的场景。</p><h5 id="相关算法题："><a href="#相关算法题：" class="headerlink" title="相关算法题："></a>相关算法题：</h5><ul><li><p><a href="https://leetcode-cn.com/problems/valid-parentheses/">括号的有效性</a>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param {string} s * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'['</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'{'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> stackTop <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>                    <span class="token punctuation">(</span>stackTop <span class="token operator">===</span> <span class="token string">'('</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>stackTop <span class="token operator">===</span> <span class="token string">'['</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">']'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>stackTop <span class="token operator">===</span> <span class="token string">'{'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'}'</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><hr><h5 id="要点：-1"><a href="#要点：-1" class="headerlink" title="要点："></a>要点：</h5><ul><li>队列是一个<strong>先进先出</strong>的数据结构</li><li>JavaScript中没有队列，但可以用Array实现栈的所有功能</li><li>队列常用操作：<ul><li><code>push()</code>：入队</li><li><code>shift()</code>：从队列的第一个元素出队</li><li><code>queue[0]</code>：查看队列的第一个元素</li></ul></li></ul><h5 id="使用场景：-1"><a href="#使用场景：-1" class="headerlink" title="使用场景："></a>使用场景：</h5><ul><li>JS异步任务中的任务队列：JS式单线程，无法同时处理异步中的并发任务。使用任务队列先后处理异步任务</li><li>计算最近请求次数</li></ul><h5 id="相关算法题：-1"><a href="#相关算法题：-1" class="headerlink" title="相关算法题："></a>相关算法题：</h5><ul><li><p><a href="https://leetcode-cn.com/problems/number-of-recent-calls/">最近的请求次数</a>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">RecentCounter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//在构造函数中创建队列，原型上的ping方法多次访问的就是同一个队列</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// @param {number} t</span><span class="token comment">// @return {number}</span><span class="token class-name">RecentCounter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">ping</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> t <span class="token operator">-</span> <span class="token number">3000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your RecentCounter object will be instantiated and called as such: * var obj = new RecentCounter() * var param_1 = obj.ping(t) */</span><span class="token comment">//解题思路</span><span class="token comment">//1.有新请求就入队，3000ms前发出的请求就出队</span><span class="token comment">//2.队列的长度就是最近请求次数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><hr><h5 id="什么是链表？"><a href="#什么是链表？" class="headerlink" title="什么是链表？"></a>什么是链表？</h5><ul><li>多个元素组成的列表</li><li>元素存储不连续，用<code>next</code>指针连在一起</li><li>JavaScript中没有链表这种结构，但可以用Object模拟链表</li></ul><p><a href="https://image.flamingow.cn/image/YjD"><img src="https://image.flamingow.cn/images/2021/03/08/c113090f664a8d7adcf836ca513e9476.png"></a></p><h5 id="数组与链表的区别"><a href="#数组与链表的区别" class="headerlink" title="数组与链表的区别"></a>数组与链表的区别</h5><ul><li>数组：增删<strong>非首位元素</strong>时往往需要移动元素</li><li>链表：增删<strong>非首位元素</strong>，不需要移动元素，只需要更改next的指向即可</li></ul><h5 id="链表的相关操作："><a href="#链表的相关操作：" class="headerlink" title="链表的相关操作："></a>链表的相关操作：</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//声明一些链表元素</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token string">'w'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token string">'a'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token string">'n'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token string">'g'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//将所有元素连在一起形成链表，其中a是表头，包含了所有的元素</span>a<span class="token punctuation">.</span>next <span class="token operator">=</span> b<span class="token punctuation">;</span>b<span class="token punctuation">.</span>next <span class="token operator">=</span> c<span class="token punctuation">;</span>c<span class="token punctuation">.</span>next <span class="token operator">=</span> d<span class="token punctuation">;</span><span class="token comment">//遍历链表</span><span class="token keyword">let</span> p <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//声明一个指针指向a</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//在链表中间插入值</span><span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token string">'lili'</span> <span class="token punctuation">}</span>b<span class="token punctuation">.</span>next <span class="token operator">=</span> h<span class="token punctuation">;</span>h<span class="token punctuation">.</span>next <span class="token operator">=</span> c<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//删除h</span>b<span class="token punctuation">.</span>next <span class="token operator">=</span> c<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="相关算法题：-2"><a href="#相关算法题：-2" class="headerlink" title="相关算法题："></a>相关算法题：</h5><ul><li><p><a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">删除链表中的节点</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment">/** * @param {ListNode} node * @return {void} Do not return anything, modify node in-place instead. */</span><span class="token keyword">var</span> <span class="token function-variable function">deleteNode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    node<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//思路</span><span class="token comment">//无法直接获取被删除节点上的上个节点，将被删除节点转移到下个节点</span><span class="token comment">//将要删除的节点下一个节点的值赋值给要删除的节点</span><span class="token comment">//删除下一节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">删除排序链表中的重复元素</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">deleteDuplicates</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">===</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 思路 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token comment">//遍历链表，由于是排序链表，所以重复的元素必相邻，我们只需要对比当前节点元素是否等于下一节点元素，相同则p.next = p.next.next，不同则p = p.next。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/">环形链表</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment">/** * @param {ListNode} head * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> p2 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&amp;&amp;</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">===</span> p2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/**思路：快慢指针法声明两个指针，都从头节点开始出发，慢指针每次走两步，不断比较他们指向节点的值。如果节点值相同，说明有环，返回true；如果不同，继续循环。循环结束若没有返回说明没有环返回false。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="前端与链表"><a href="#前端与链表" class="headerlink" title="前端与链表"></a>前端与链表</h5><ul><li><p>JavaScript中的原型链也是一个链表</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//instanceof原理</span><span class="token keyword">const</span> <span class="token function-variable function">instanceOf</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      p <span class="token operator">=</span> p<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用链表指针获取json的节点值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token punctuation">{</span>   a<span class="token operator">:</span> <span class="token punctuation">{</span>b<span class="token operator">:</span> <span class="token punctuation">{</span>c<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   d<span class="token operator">:</span> <span class="token punctuation">{</span>e<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//定义一个路径</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//查看上方路径所指向的节点值</span><span class="token keyword">let</span> p <span class="token operator">=</span> json<span class="token punctuation">;</span>path<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   p <span class="token operator">=</span> p<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕React（九）</title>
      <link href="2021/03/07/React/%E6%AD%BB%E7%A3%95React-9/"/>
      <url>2021/03/07/React/%E6%AD%BB%E7%A3%95React-9/</url>
      
        <content type="html"><![CDATA[<h4 id="setState详解"><a href="#setState详解" class="headerlink" title="setState详解"></a>setState详解</h4><hr><h5 id="setState更新状态的2种写法"><a href="#setState更新状态的2种写法" class="headerlink" title="setState更新状态的2种写法"></a>setState更新状态的2种写法</h5><ul><li><code>setState(stateChange,[callback])</code>——<strong>对象式</strong>的setState<ul><li><code>stateChange</code>为状态改变对象（该对象可以体现出状态的更改）</li><li><code>callback</code>是可选的回调函数，他在状态更新完毕、界面也更新后（也就是render调用后）才调用，例如想要回去改变后的状态就可以在callback函数里面获取。</li></ul></li><li><code>setState(updater, [callback])</code>——<strong>函数式</strong>的setState<ul><li><code>updater</code>为返回stateChange对象的<strong>函数</strong></li><li><code>updater</code>可以接收到state和props</li><li><code>callback</code>是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用</li></ul></li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>对象式的setState是函数式的setState的简写方式(语法糖)</li><li>使用原则：<ul><li>如果新状态不依赖于原状态 → 使用对象方式</li><li>如果新状态依赖于原状态 → 使用函数方式</li><li>如果需要在setState()执行后获取最新的状态数据, 要在第二个callback函数中读取</li></ul></li></ul><h4 id="LazyLoad"><a href="#LazyLoad" class="headerlink" title="LazyLoad"></a>LazyLoad</h4><hr><p>LazyLoad指的就是路由组件的“懒加载”，页面上的路由组件在第一次渲染时并不会全部加载，当点击的时候才发送请求加载点击的组件。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//1、通过React的lazy函数配合import()函数动态加载路由组件 ===&gt; 路由组件代码会被分开打包</span><span class="token keyword">const</span> Login <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/pages/Login'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//2、通过&lt;Suspense&gt;指定在加载得到路由打包文件前显示一个自定义loading界面</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">loading.....</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">//此处也可以外部写入一个专门的加载组件      //注册路由        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/xxx<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Xxxx<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Redirect</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h4><hr><p>什么是Hooks？它是React 16.8.0版本增加的新特性/新语法，可以让我们在函数组件种使用state以及其他的React特性。</p><h5 id="三个常用的Hook"><a href="#三个常用的Hook" class="headerlink" title="三个常用的Hook"></a>三个常用的Hook</h5><ul><li><p>State Hook：</p><ul><li><p>State Hook让函数组件也可以有state状态, 并进行状态数据的读写操作</p></li><li><p>语法：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>xxx<span class="token punctuation">,</span> setXxx<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span>initValue<span class="token punctuation">)</span><span class="token comment">//initValue是第一次初始化指定的值在内部作缓存</span><span class="token comment">//返回值为包含两个元素的数组，第一个xxx为内部档期啊状态值，第二个setXxx为更新状态值的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>setXxx()的两种写法：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//参数为非函数值，直接指定新的状态值，内部用其覆盖原来的状态值</span><span class="token function">setXxx</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token comment">//参数为函数，接收原本的状态值，返回新的状态值，内部用其覆盖原来的状态值</span><span class="token function">setXxx</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> newValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Effect Hook</p><ul><li><p>Effect Hook可以让你在函数组件种执行副作用操作（用于模拟类组件种的声明周期钩子）</p></li><li><p>React种的副作用操作：</p><ul><li>发送ajax请求数据获取</li><li>设置订阅/启动定时器</li><li>手动更改真实DOM</li></ul></li><li><p>语法：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">//在此可以执行任何带副作用操作</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">// 在组件卸载钱执行</span>      <span class="token comment">//在此做一些收尾工作，比如清除定时器/取消订阅等</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span>stateValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//如果指定的是[]（空数组）,回调函数值会在第一次render()后执行</span><span class="token comment">//可以把useEffect Hook看作如下三个函数的组合</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Ref Hook</p><ul><li><p>Ref Hook可以在函数组件中存储/查找组件内的标签或任意其它数据</p></li><li><p>语法：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> refContainer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作用：保存标签对象,功能与React.createRef()一样</p></li></ul></li></ul><h4 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h4><hr><ul><li><p>作用：可以不用必须有一个真实的DOM根标签了</p></li><li><p>使用：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxx</span><span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxxx</span><span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">//如果是空标签无法传递props</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxx</span><span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxxx</span><span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><hr><p>一种组件间通信方式, 常用于【祖组件】与【后代组件】间通信。</p><h5 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h5><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//注意:在应用开发中一般不用context, 一般都用它的封装react插件</span><span class="token comment">//创建Context容器对象：</span><span class="token keyword">const</span> XxxContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//渲染子组件时，外面包裹xxxContext.Provider, 通过value属性给后代组件传递数据：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxxContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>数据<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">子组件    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xxxContext.Provider</span><span class="token punctuation">&gt;</span></span><span class="token comment">//后代组件读取数据</span><span class="token comment">//第一种方式：适用于类组件</span><span class="token keyword">static</span> contextType <span class="token operator">=</span> xxxContext  <span class="token comment">// 声明接收context</span><span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token comment">// 读取context中的value数据</span><span class="token comment">//第二种方式：函数组件与类组件都可以</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxxContext.Consumer</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token punctuation">{</span>      <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span> <span class="token comment">// value就是context中的value数据</span>        要显示的内容      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xxxContext.Consumer</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组件优化——PureComponent"><a href="#组件优化——PureComponent" class="headerlink" title="组件优化——PureComponent"></a>组件优化——PureComponent</h4><hr><h5 id="Component的两个问题"><a href="#Component的两个问题" class="headerlink" title="Component的两个问题"></a>Component的两个问题</h5><ul><li>只要执行setState(),即使不改变状态数据, 组件也会重新render() → 效率低</li><li>只要当前组件重新render(), 就会自动重新render子组件，纵使子组件没有用到父组件的任何数据 → 效率低</li></ul><h5 id="效率高的做法"><a href="#效率高的做法" class="headerlink" title="效率高的做法"></a>效率高的做法</h5><p>只有当组件种的state或props数据发生改变时才重新render()</p><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>Component中的shouldComponentUpdate总是返回true</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li>方法一：重写<code>shouldComponentUpdate()</code>方法，比较新旧state或props数据, 如果有变化才返回true, 如果没有返回false</li><li>方法二：使用PureComponent，PureComponent重写了<code>shouldComponentUpdate()</code>, 只有state或props数据有变化才返回true</li><li>注意：<ul><li>方法二只是进行state和props数据的浅比较, 如果只是数据对象内部数据变了, 返回false  </li><li>不要直接修改state数据, 而是要产生新数据</li><li>项目中一般使用PureComponent来优化</li></ul></li></ul><h4 id="render-props（插槽）"><a href="#render-props（插槽）" class="headerlink" title="render props（插槽）"></a>render props（插槽）</h4><hr><h5 id="如何向组件内部动态传入带内容的结构-标签-？"><a href="#如何向组件内部动态传入带内容的结构-标签-？" class="headerlink" title="如何向组件内部动态传入带内容的结构(标签)？"></a>如何向组件内部动态传入带内容的结构(标签)？</h5><ul><li>vue中：使用slot技术，也就是通过组件标签体传入结构<code>&lt;A&gt;&lt;B/&gt;&lt;/A&gt;</code></li><li>React中：<ul><li>使用children props：通过组件标签传入结构</li><li>使用render props ：通过组件标签属性传入结构，而且可以携带数据，一般用render作为函数属性</li></ul></li></ul><h5 id="children-props"><a href="#children-props" class="headerlink" title="children props"></a>children props</h5><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">B</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">xxxx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">B</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>问题<span class="token operator">:</span> 如果<span class="token constant">B</span>组件需要<span class="token constant">A</span>组件内的数据<span class="token punctuation">,</span> <span class="token operator">==</span><span class="token operator">&gt;</span> 做不到 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h5><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span> <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">C</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span><span class="token constant">A</span>组件<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>内部state数据<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token constant">C</span>组件<span class="token operator">:</span> 读取<span class="token constant">A</span>组件传入的数据显示 <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="错误边界"><a href="#错误边界" class="headerlink" title="错误边界"></a>错误边界</h4><hr><p>错误边界(Error boundary)：用来捕获<strong>后代组件</strong>错误，渲染出备用页面(不会在生产环境生效，备用页会在项目上线后生效)</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误。</p><h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><p>getDerivedStateFromError配合componentDidCatch</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 生命周期函数，一旦后台组件报错，就会触发</span><span class="token keyword">static</span> <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在render之前触发</span>    <span class="token comment">// 返回新的state</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        hasError<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">componentDidCatch</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 统计页面的错误。发送请求发送到后台去</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组件通信方式总结"><a href="#组件通信方式总结" class="headerlink" title="组件通信方式总结"></a>组件通信方式总结</h4><hr><h5 id="几种通信方式"><a href="#几种通信方式" class="headerlink" title="几种通信方式"></a>几种通信方式</h5><ul><li>props：<ul><li>children props</li><li>render props</li></ul></li><li>消息订阅-发布：<ul><li>pubs-sub——常用</li><li>event等</li></ul></li><li>集中式管理：<ul><li>redux</li><li>dva等</li></ul></li><li>生产者-消费者模式：<ul><li>conText</li></ul></li></ul><h5 id="如何搭配使用？"><a href="#如何搭配使用？" class="headerlink" title="如何搭配使用？"></a>如何搭配使用？</h5><ul><li>父子组件：props</li><li>兄弟组件：消息订阅-发布、集中式管理</li><li>祖孙组件（跨级组件）：消息订阅-发布、集中式管理、conText（开发用的少，封装插件用的多）</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hooks </tag>
            
            <tag> LazyLaod </tag>
            
            <tag> conText </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕React（八）</title>
      <link href="2021/03/05/React/%E6%AD%BB%E7%A3%95React-8/"/>
      <url>2021/03/05/React/%E6%AD%BB%E7%A3%95React-8/</url>
      
        <content type="html"><![CDATA[<h4 id="redux简介"><a href="#redux简介" class="headerlink" title="redux简介"></a>redux简介</h4><hr><blockquote><p>redux是一个专门用于做状态管理的JS库（不是react插件库）；它可以用在react，argular，rvue等项目中，但基本与react配合使用；他的作用是：redux可以集中式管理react应用中多个组件的共享状态。</p></blockquote><h5 id="适用于redux的场景"><a href="#适用于redux的场景" class="headerlink" title="适用于redux的场景"></a>适用于redux的场景</h5><ul><li>某个组件的状态，需要让其他组件可以随时拿到（共享）</li><li>一个组件需要改变另一个组件的状态（通信）</li><li>总体原则：能不用就不用，如果不用比较吃力才考虑使用</li></ul><h5 id="redux工作流程"><a href="#redux工作流程" class="headerlink" title="redux工作流程"></a>redux工作流程</h5><p><img src="https://image.flamingow.cn/images/2021/03/05/redux.png"></p><h4 id="redux的三个核心概念以及相关API"><a href="#redux的三个核心概念以及相关API" class="headerlink" title="redux的三个核心概念以及相关API"></a>redux的三个核心概念以及相关API</h4><hr><h5 id="action"><a href="#action" class="headerlink" title="action"></a>action</h5><ul><li>发生动作的对象</li><li>包含两个属性r<ul><li><code>type</code>：标识属性, 值为字符串, 唯一, 必要属性</li><li><code>data</code>：数据属性, 值类型任意, 可选属性</li></ul></li></ul><h5 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h5><ul><li>用于初始化状态、加工状态，服务于组件</li><li>加工时，根据旧的state和action，产生新的state的<strong>纯函数</strong></li></ul><h5 id="store"><a href="#store" class="headerlink" title="store"></a>store</h5><ul><li>将state、action、reducer联系在一起的对象</li><li>相关api：<ul><li><code>getState()</code>: 得到state</li><li><code>dispatch(action)</code>: 分发action, 触发reducer调用, 产生新的state</li><li><code>subscribe(listener)</code>: 注册监听, 当产生了新的state时, 自动调用</li></ul></li></ul><h5 id="redux的核心API"><a href="#redux的核心API" class="headerlink" title="redux的核心API"></a>redux的核心API</h5><ul><li><code>createstore()</code>：创建包含指定reducer的store对象</li><li><code>applyMiddleware()</code>：应用上基于redux的中间件(插件库)</li><li><code>combineReducers()</code>：合并多个reducer函数</li></ul><h4 id="redux异步编程"><a href="#redux异步编程" class="headerlink" title="redux异步编程"></a>redux异步编程</h4><hr><blockquote><p>redux默认是不能及进行异步处理的。</p><p>某些时候应用中需要在redux中执行异步任务，如ajax，定时器等</p></blockquote><h5 id="安装中间件"><a href="#安装中间件" class="headerlink" title="安装中间件"></a>安装中间件</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save redux-thunk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="react-redux简介"><a href="#react-redux简介" class="headerlink" title="react-redux简介"></a>react-redux简介</h4><hr><blockquote><p>react-redux是一个react官方的插件库。</p><p>它专门用来简化react应用中redux的使用。</p></blockquote><p><img src="https://image.flamingow.cn/images/2021/03/06/react-redux.png" alt="react-redux模型图"></p><h5 id="UI组件与容器组件"><a href="#UI组件与容器组件" class="headerlink" title="UI组件与容器组件"></a>UI组件与容器组件</h5><p>react-redux将所有组件分为两大类：UI组件和容器组件。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//UI组件</span><span class="token number">1</span><span class="token punctuation">)</span>只负责 <span class="token constant">UI</span> 的呈现，不带有任何业务逻辑<span class="token number">2</span><span class="token punctuation">)</span><span class="token function">通过props接收数据</span><span class="token punctuation">(</span>一般数据和函数<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">)</span>不使用任何 Redux 的 <span class="token constant">API</span><span class="token number">4</span><span class="token punctuation">)</span>一般保存在components文件夹下<span class="token comment">//容器组件</span><span class="token number">1</span><span class="token punctuation">)</span>负责管理数据和业务逻辑，不负责<span class="token constant">UI</span>的呈现<span class="token number">2</span><span class="token punctuation">)</span>使用 Redux 的 <span class="token constant">API</span><span class="token number">3</span><span class="token punctuation">)</span>一般保存在containers文件夹下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="react-redux相关API"><a href="#react-redux相关API" class="headerlink" title="react-redux相关API"></a>react-redux相关API</h4><hr><ul><li><p>**<code>Provider</code>**：让所有组件都可以得到state数据</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>**<code>connect</code>**：用于包装 UI 组件生成容器组件，经过包装之后，无需再检测redux中状态的变化来重新渲染页面</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span>  <span class="token function">connect</span><span class="token punctuation">(</span>    mapStateToprops<span class="token punctuation">,</span>    mapDispatchToProps  <span class="token punctuation">)</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>**<code>mapStateToprops</code>**：将外部的数据（即state对象）转换为UI组件的标签属性，映射状态</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token operator">:</span> state <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**<code>mapDispatchToProps</code>**：将分发action的函数转换为UI组件的标签属性，映射操作状态的方法</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token parameter">dispatch</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function-variable function">jia</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//通知redux执行加法</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAction</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">jian</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//通知redux执行减法</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createDecrementAction</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="在action中执行异步任务"><a href="#在action中执行异步任务" class="headerlink" title="在action中执行异步任务"></a>在action中执行异步任务</h5><blockquote><p>需求：一些延迟动过不想交给组件自身，想交给action。</p><p>使用场景：想要对状态进行操作，但是具体的数据靠异步任务返回。</p></blockquote><ul><li><p>安装插件，并配置到store.js中</p><pre class="line-numbers language-none"><code class="language-none">npm i redux-thunk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建action的函数不再返回一般函数，而是一个函数，该函数中写异步任务</p></li><li><p>异步任务有结果后，分发一个同步的action去真正操作数据。</p></li><li><p>备注：异步action不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步action</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
            <tag> react-redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕React（七）</title>
      <link href="2021/03/04/React/%E6%AD%BB%E7%A3%95React-7/"/>
      <url>2021/03/04/React/%E6%AD%BB%E7%A3%95React-7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Antd官网：<a href="https://ant.design/index-cn">点击此处</a></p><p>Antd-Github：<a href="https://github.com/ant-design/ant-design/">点击此处</a></p></blockquote><h4 id="antd的按需引入以及自定主题"><a href="#antd的按需引入以及自定主题" class="headerlink" title="antd的按需引入以及自定主题"></a>antd的按需引入以及自定主题</h4><hr><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> react-app-rewired customize-cra babel-plugin-import <span class="token function">less</span> less-loader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="修改package-jsom"><a href="#修改package-jsom" class="headerlink" title="修改package.jsom"></a>修改package.jsom</h5><pre class="line-numbers language-json" data-language="json"><code class="language-json">....<span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-app-rewired start"</span><span class="token punctuation">,</span><span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-app-rewired build"</span><span class="token punctuation">,</span><span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"react-app-rewired test"</span><span class="token punctuation">,</span><span class="token property">"eject"</span><span class="token operator">:</span> <span class="token string">"react-scripts eject"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="脚手架根目录下创建config-overrides-js"><a href="#脚手架根目录下创建config-overrides-js" class="headerlink" title="脚手架根目录下创建config-overrides.js"></a>脚手架根目录下创建config-overrides.js</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//配置具体的修改规则</span><span class="token keyword">const</span> <span class="token punctuation">{</span> override<span class="token punctuation">,</span> fixBabelImports<span class="token punctuation">,</span>addLessLoader<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'customize-cra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">override</span><span class="token punctuation">(</span><span class="token function">fixBabelImports</span><span class="token punctuation">(</span><span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>libraryName<span class="token operator">:</span> <span class="token string">'antd'</span><span class="token punctuation">,</span>libraryDirectory<span class="token operator">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>style<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">addLessLoader</span><span class="token punctuation">(</span><span class="token punctuation">{</span>lessOptions<span class="token operator">:</span><span class="token punctuation">{</span>javascriptEnabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>modifyVars<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">'@primary-color'</span><span class="token operator">:</span> <span class="token string">'green'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上步骤完成后，就不用在组件里面引入样式了</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ant-design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕React（六）</title>
      <link href="2021/03/01/React/%E6%AD%BB%E7%A3%95React-6/"/>
      <url>2021/03/01/React/%E6%AD%BB%E7%A3%95React-6/</url>
      
        <content type="html"><![CDATA[<h4 id="React路由"><a href="#React路由" class="headerlink" title="React路由"></a>React路由</h4><hr><h5 id="什么是路由？"><a href="#什么是路由？" class="headerlink" title="什么是路由？"></a>什么是路由？</h5><ul><li>一个路由就是一个映射关系（key：value）</li><li>key为路径，value可能是function或component</li></ul><h5 id="路由分类"><a href="#路由分类" class="headerlink" title="路由分类"></a>路由分类</h5><ul><li>后端路由<ul><li>理解：value是function，用来处理客户端的请求</li><li>注册路由：<code>router.get(path,function(req,res))</code></li><li>工作过程：当node接受到一个请求时，根据请求路径找到匹配的路由，调用路由中的函数来处理请求，返回响应数据</li></ul></li><li>前端路由：<ul><li>浏览器端路由，value是component，用于展示页面内容</li><li>注册路由：<code>&lt;Route path="/test" component={Test}&gt;</code></li><li>工作过程：当利用兰奇的path变成/test时，当前路由组件就会变为Test组件，其实现是依靠BOM中的history属性（也有hash的方式，锚点）</li></ul></li></ul><h5 id="关于SPA："><a href="#关于SPA：" class="headerlink" title="关于SPA："></a>关于SPA：</h5><ul><li>单页Web应用（single page web application，SPA）</li><li>整个应用只有<strong>一个完整的页面</strong></li><li>点击页面中的链继而<strong>不会刷新</strong>页面，值会做页面的<strong>局部更新</strong></li><li>数据都需要通过ajax请求获取，并在前端异步展现</li></ul><h4 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h4><hr><h5 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h5><ul><li><p>安装插件库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> react-router-dom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>该插件用于在React中实现一个SPA应用，基于react的项目基本都会用到此库。</p></li></ul><h5 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h5><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//引入插件库</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Link<span class="token punctuation">,</span>Router<span class="token punctuation">,</span>BrowserRouter<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token comment">//a标签改为Link标签</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/demo<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Demo</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">//Route标签进行路径的匹配</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/demo<span class="token punctuation">'</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Demo<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token comment">//&lt;App&gt;的最外侧包裹一个&lt;BrowserRouter&gt;或&lt;HashRouter&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="路由组件与一般组件的区别"><a href="#路由组件与一般组件的区别" class="headerlink" title="路由组件与一般组件的区别"></a>路由组件与一般组件的区别</h5><ul><li><p>写法不同</p><ul><li>一般组件：<code>&lt;Demo/&gt;</code></li><li>路由组件：<code>&lt;Route path='/demo' component={Demo}/&gt;</code></li></ul></li><li><p>存放位置不同</p><ul><li>一般组件：components</li><li>路由组件：pages</li></ul></li><li><p>接收到的props不同</p><ul><li><p>一般组件：写组件标签时，传递了什么，就能收到什么</p></li><li><p>路由组件：接收到三个固定的属性如下：</p><pre class="line-numbers language-none"><code class="language-none">history:   go: ƒ go(n)   goBack: ƒ goBack()   goForward: ƒ goForward()   push: ƒ push(path, state)   replace: ƒ replace(path, state)location:   pathname: "/about"   search: ""   state: undefinedmatch:   params: {}   path: "/about"   url: "/about"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h5 id="一些常用的语法："><a href="#一些常用的语法：" class="headerlink" title="一些常用的语法："></a>一些常用的语法：</h5><ul><li><p>NavLink：<code>&lt;NavLink&gt;</code>是<code>&lt;Link&gt;</code>的一个特定版本，会在匹配上当前的url的时候给已经渲染的元素添加参数，组件的属性有如下，一般我们可以自己封装<code>&lt;MyNavLink/&gt;</code>使代码更加简洁。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">avtiveClassname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">这里是NavLink标签</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">//- activeClassName(string)：设置选中样式，默认值为active，可以实现路由连接的高亮</span><span class="token comment">//- activeStyle(object)：当元素被选中时，为此元素添加样式</span><span class="token comment">//- exact(bool)：为true时，只有当导致和完全匹配class和style才会应用</span><span class="token comment">//- isActive(func)判断链接是否激活的额外逻辑的功能</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Switch：通常情况下path和component是一一对应的关系，如果一个path对应多个组件的话，结果会将多个组件都渲染到页面上，这是会产生一个效率问题，如果在注册路由外面包裹一个<code>&lt;Switch&gt;</code>标签，可以实现单一匹配，提高路由匹配效率。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">//这时/home的路径只会匹配Home组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="解决多级路径刷新页面样式丢失的问题"><a href="#解决多级路径刷新页面样式丢失的问题" class="headerlink" title="解决多级路径刷新页面样式丢失的问题"></a>解决多级路径刷新页面样式丢失的问题</h5><ul><li>public/index.html中引入样式时不写<code>./</code>写<code>/</code>（常用）</li><li>public/index.html中引入样式时不写<code>./</code>写<code>%PUBLIC_URL%</code>（常用）</li><li>使用HashRouter</li></ul><h5 id="路由的严格匹配与模糊匹配"><a href="#路由的严格匹配与模糊匹配" class="headerlink" title="路由的严格匹配与模糊匹配"></a>路由的严格匹配与模糊匹配</h5><ul><li>默认使用的是模糊匹配（【输入的路径】必须包含有【匹配的路径】），且顺序要一致）</li><li>开启严格匹配：<code>&lt;Route exact={true} path="/about" component={About}/&gt;</code></li><li>严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</li></ul><h5 id="Redirect的使用"><a href="#Redirect的使用" class="headerlink" title="Redirect的使用"></a>Redirect的使用</h5><ul><li><p>一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Redirect</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h5><ul><li>注册子路由时要写上父路由的path值</li><li>路由的匹配是按照注册路由的顺序进行的</li></ul><h5 id="向路由组件传递参数"><a href="#向路由组件传递参数" class="headerlink" title="向路由组件传递参数"></a>向路由组件传递参数</h5><ul><li><p>params参数</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//路由链接（携带参数）,to后面的路径可以用模板字符串携带变量</span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">'/demo/test/tom/18'</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">//注册路由（声明接收）</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/demo/test/:name/:age<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">//组件接收参数</span><span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>search参数</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//路由链接（携带参数）</span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">'/demo/test?name=tom&amp;age=18'</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">//注册路由(无需声明，正常注册即可)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/demo/test<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">//接收参数</span><span class="token keyword">const</span> <span class="token punctuation">{</span>search<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token comment">//获取到的search是urlencoded编码字符串，需要借助querystring解析</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>state参数</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//路由链接（携带参数）</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>pathname<span class="token operator">:</span><span class="token string">'/demo/test'</span><span class="token punctuation">,</span>state<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'tom'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">详情</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">//注册路由(无需声明，正常注册即可)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/demo/test<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">//接收参数</span><span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state<span class="token comment">//刷新也可以保留参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h5><p>借助this.prosp.history对象上的API对操作路由跳转、前进、后退。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//按push的方式查看</span><span class="token keyword">this</span><span class="token punctuation">.</span>prosp<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//按replace的方式查看</span><span class="token keyword">this</span><span class="token punctuation">.</span>prosp<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//回退</span><span class="token keyword">this</span><span class="token punctuation">.</span>prosp<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//前进</span><span class="token keyword">this</span><span class="token punctuation">.</span>prosp<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">goForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//跳转</span><span class="token keyword">this</span><span class="token punctuation">.</span>prosp<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h5><ul><li><p>withRouter是react-router-dom里面的一个函数，可以加工一个函数，让一般函数具备路由组件所特有的API</p></li><li><p>withRouter的返回值是一个新组件</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>一般组件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="RrowserRouter与HashRouter的区别"><a href="#RrowserRouter与HashRouter的区别" class="headerlink" title="RrowserRouter与HashRouter的区别"></a>RrowserRouter与HashRouter的区别</h5><ul><li>底层原理不一样：<ul><li>BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。</li><li>HashRouter使用的是URL的哈希值</li></ul></li><li>path表现形式不一样：<ul><li>BrowserRouter的路径中没有#,例如：localhost:3000/demo/test</li><li>HashRouter的路径包含#,例如：localhost:3000/#/demo/test</li></ul></li><li>刷新后对路由state参数的影响<ul><li>BrowserRouter没有任何影响，因为state保存在history对象中</li><li>HashRouter刷新后会导致路由state参数的丢失！！！</li></ul></li><li>HashRouter可以用于解决一些路径错误相关的问题，比如之前的样式丢失。（一般还是BrowserRouter常用）</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React路由 </tag>
            
            <tag> react-router-dom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕React（五）</title>
      <link href="2021/02/28/React/%E6%AD%BB%E7%A3%95React-5/"/>
      <url>2021/02/28/React/%E6%AD%BB%E7%A3%95React-5/</url>
      
        <content type="html"><![CDATA[<h4 id="消息订阅与发布机制"><a href="#消息订阅与发布机制" class="headerlink" title="消息订阅与发布机制"></a>消息订阅与发布机制</h4><hr><h5 id="工具库：PubSubJS"><a href="#工具库：PubSubJS" class="headerlink" title="工具库：PubSubJS"></a>工具库：PubSubJS</h5><p>PubSubJS is a topic-based publish/subscribe library written in JavaScript.即 一个利用JavaScript进行发布/订阅的库。</p><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> pubsub-js --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h5><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//引入</span><span class="token keyword">import</span> PubSub <span class="token keyword">from</span> <span class="token string">'pubsub-js'</span><span class="token comment">//订阅</span><span class="token keyword">const</span> token <span class="token operator">=</span> PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'MY TOPIC'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token comment">// 这里将会输出对应设置的MY TOPIC</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// 这里将会输出对应设置的参数</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发布消息</span>PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'MY TOPIC'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取消订阅</span>PubSub<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取消全部订阅</span>PubSub<span class="token punctuation">.</span><span class="token function">clearAllSubscriptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h4><hr><p>Fetch API 提供了一个 JavaScript 接口，用于访问和操纵 HTTP 管道的一些具体部分，例如请求和响应。它还提供了一个全局 fetch() 方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源。</p><h5 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h5><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">MDN—Fetch</a></li><li><a href="https://segmentfault.com/a/1190000003810652">传统 Ajax 已死，Fetch 永生</a>（标题党）</li></ul><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>不在借助xhr对象提交ajax请求，是window上的原生函数</li><li>兼容性不好，老版本浏览器可能不支持</li></ul><h5 id="API"><a href="#API" class="headerlink" title="API"></a>API</h5><ul><li><p>Get请求：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Post请求：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>  method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>  body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>async/await优化：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Oops, error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 注：这段代码如果想运行，外面需要包一个 async function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Github搜索案例总结"><a href="#Github搜索案例总结" class="headerlink" title="Github搜索案例总结"></a>Github搜索案例总结</h4><hr><ul><li><p>设计状态时要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办</p></li><li><p>ES6小知识点：解构赋值+重命名</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token punctuation">{</span>b<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment">//传统解构赋值</span><span class="token keyword">const</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token punctuation">{</span>b<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment">//连续解构赋值</span><span class="token keyword">const</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token punctuation">{</span>b<span class="token operator">:</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment">//连续解构赋值+重命名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>消息订阅与发布机制</p><ul><li>先订阅，再发布</li><li>适用于任意组件间通信</li><li>要在组件的componentWillUnmount中取消订阅</li></ul></li><li><p>总结一下react发送ajax请求的几种方式</p><ul><li>axios（promise风格）</li><li>fetch发送请求（关注分离的设计思想）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PubSub </tag>
            
            <tag> Fetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios入门</title>
      <link href="2021/02/27/Axios/%E6%AD%BB%E7%A3%95axios-1/"/>
      <url>2021/02/27/Axios/%E6%AD%BB%E7%A3%95axios-1/</url>
      
        <content type="html"><![CDATA[<h4 id="Json-Server"><a href="#Json-Server" class="headerlink" title="Json-Server"></a>Json-Server</h4><hr><p>在前端开发中，很多时候需要用到一些数据接口，json-server就可以指定一个json文件作为API的数据元，模拟服务器端接口数据。</p><h5 id="安装JSON-Server"><a href="#安装JSON-Server" class="headerlink" title="安装JSON-Server"></a>安装JSON-Server</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g json-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="创建一个名为db-json的文件包含一些数据的文件"><a href="#创建一个名为db-json的文件包含一些数据的文件" class="headerlink" title="创建一个名为db.json的文件包含一些数据的文件"></a>创建一个名为<code>db.json</code>的文件包含一些数据的文件</h5><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"posts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"json-server"</span><span class="token punctuation">,</span>      <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"typicode"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"some comment"</span><span class="token punctuation">,</span>      <span class="token property">"postId"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"profile"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"typicode"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在db-json文件所在文件夹启动json-server"><a href="#在db-json文件所在文件夹启动json-server" class="headerlink" title="在db.json文件所在文件夹启动json server"></a>在<code>db.json</code>文件所在文件夹启动json server</h5><pre class="line-numbers language-json" data-language="json"><code class="language-json">json-server --watch db.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>服务启动完成后，访问指定的端口即可查看数据。</p><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><hr><p>axios是基于Promise的HTTP客户端，可以在浏览器和node.js环境下运行。是当下前端最流行的ajax请求库，React/Vue官方都腿甲使用axios发ajax请求。</p><h5 id="axios特点"><a href="#axios特点" class="headerlink" title="axios特点"></a>axios特点</h5><ul><li>基于xhr+promise的异步ajax请求库</li><li>浏览器端/node端都可以使用</li><li>支持请求/响应拦截器</li><li>支持请求取消</li><li>请求/响应数据转换</li><li>批量发送多个请求</li></ul><h5 id="axios常用语法"><a href="#axios常用语法" class="headerlink" title="axios常用语法"></a>axios常用语法</h5><p><img src="https://image.flamingow.cn/images/2021/02/27/axios_api.png" alt="axios_api.png"></p><ul><li><p>axios(config)：通用/最本质的发任意类型请求的方式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//get请求</span>btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//发送 AJAX 请求</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment">//请求类型</span>        method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>        <span class="token comment">//URL</span>        url<span class="token operator">:</span> <span class="token string">'http://localhost:3000/posts/2'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//POST请求，添加一篇新的文章</span>btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//发送 AJAX 请求</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment">//请求类型</span>        method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        <span class="token comment">//URL</span>        url<span class="token operator">:</span> <span class="token string">'http://localhost:3000/posts'</span><span class="token punctuation">,</span>        <span class="token comment">//设置请求体</span>        data<span class="token operator">:</span> <span class="token punctuation">{</span>            title<span class="token operator">:</span> <span class="token string">"今天天气不错, 还挺风和日丽的"</span><span class="token punctuation">,</span>            author<span class="token operator">:</span> <span class="token string">"张三"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//PUT请求，更新数据</span>btns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//发送 AJAX 请求</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment">//请求类型</span>        method<span class="token operator">:</span> <span class="token string">'PUT'</span><span class="token punctuation">,</span>        <span class="token comment">//URL</span>        url<span class="token operator">:</span> <span class="token string">'http://localhost:3000/posts/3'</span><span class="token punctuation">,</span>        <span class="token comment">//设置请求体</span>        data<span class="token operator">:</span> <span class="token punctuation">{</span>            title<span class="token operator">:</span> <span class="token string">"今天天气不错, 还挺风和日丽的"</span><span class="token punctuation">,</span>            author<span class="token operator">:</span> <span class="token string">"李四"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//DELETE请求，删除数据</span>btns<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//发送 AJAX 请求</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment">//请求类型</span>        method<span class="token operator">:</span> <span class="token string">'delete'</span><span class="token punctuation">,</span>        <span class="token comment">//URL</span>        url<span class="token operator">:</span> <span class="token string">'http://localhost:3000/posts/3'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>axios.request(config)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    method<span class="token operator">:</span><span class="token string">'GET'</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">'http://localhost:3000/comments'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>axios.post(url[, data, config])</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>    <span class="token string">'http://localhost:3000/comments'</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span>        <span class="token string">"body"</span><span class="token operator">:</span> <span class="token string">"喜大普奔"</span><span class="token punctuation">,</span>        <span class="token string">"postId"</span><span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>axios.create(config)</p><ul><li>更具指定配置创建一个新的axios，也就是每个新axios都有自己的配置</li><li>新axios只是没有取消请求和批量发请求的方法，其他所有语法都是一致的</li><li>为什么要设计这个语法？<ul><li>需求：项目中有部分接口需要的配置与另一部分接口需要的配置不太一样, 如何处理？</li><li>解决：创建2个新axios，每个都有自己特有的配置，分别应用到不同要求的接口请求中。</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> duanzi <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token operator">:</span> <span class="token string">'https://api.apiopen.top'</span><span class="token punctuation">,</span>    timeout<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> another <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token operator">:</span> <span class="token string">'https://b.com'</span><span class="token punctuation">,</span>    timeout<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>拦截器:</p><ul><li>axios.interceptors.request.use():添加请求拦截器</li><li>axios.interceptors.response.use(): 添加响应拦截器</li><li>拦截器函数/ajax 请求/请求的回调函数的调用顺序：<ul><li>说明：调用 axios()并不是立即发送 ajax 请求, 而是需要经历一个较长的流程</li><li>流程：请求拦截器2→请求拦截器1→发ajax请求→响应拦截器1→响应拦截器2→请求的回调</li><li>注意：此流程是通过 promise 串连起来的, 请求拦截器传递的是 config, 响应拦截器传递的是 response</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 设置请求拦截器  config 配置对象</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求拦截器 成功 - 1号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//修改 config 中的参数</span>    config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求拦截器 失败 - 1号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求拦截器 成功 - 2号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//修改 config 中的参数</span>    config<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求拦截器 失败 - 2号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置响应拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'响应拦截器 成功 1号'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token comment">// return response;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'响应拦截器 失败 1号'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'响应拦截器 成功 2号'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'响应拦截器 失败 2号'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送请求</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">'http://localhost:3000/posts'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'自定义回调处理成功的结果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>axios.CancelToken():用于创建取消请求的 token 对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//下面的功能为点击按钮，取消某个正在请求中的请求</span><span class="token comment">//获取按钮</span><span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.声明全局变量</span><span class="token keyword">let</span> cancel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//发送请求</span>btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//检测上一次的请求是否已经完成</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cancel <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//取消上一次的请求</span>        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">'http://localhost:3000/posts'</span><span class="token punctuation">,</span>        <span class="token comment">//1. 添加配置对象的属性</span>        cancelToken<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">axios<span class="token punctuation">.</span>CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//3. 将 c 的值赋值给 cancel</span>            cancel <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将 cancel 的值初始化</span>        cancel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//绑定第二个事件取消请求</span>btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><hr><ul><li>查看更多json-server的命令：<a href="https://github.com/typicode/json-server">json-server文档</a></li><li>查看更多axios的语法：<a href="https://github.com/axios/axios">axios文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios-API </tag>
            
            <tag> Json-Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise | 入土</title>
      <link href="2021/02/26/Promise/%E6%AD%BB%E7%A3%95Promise-2/"/>
      <url>2021/02/26/Promise/%E6%AD%BB%E7%A3%95Promise-2/</url>
      
        <content type="html"><![CDATA[<h4 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h4><hr><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>    <span class="token comment">//构造方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//添加属性</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//当指定多个回调时，用数组保存最合适</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment">//resolve函数</span>        <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">//限制状态的变化，只能由pending变为resolved/rejected</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> <span class="token string">'resolved'</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token comment">//调用成功的回调函数</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                self<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    item<span class="token punctuation">.</span><span class="token function">onResolved</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//reject函数</span>        <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token comment">//调用失败的回调函数</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                self<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    item<span class="token punctuation">.</span><span class="token function">onRejected</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//同步调用执行期函数</span>            <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//收到throw抛出的错误信息，并修改为失败状态</span>            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//then方法封装</span>    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment">//原生的then方法允许里面两个参数不传东西，所以我们这里也需要实现</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onResolved <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function-variable function">onResolved</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function-variable function">onRejected</span> <span class="token operator">=</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> reason<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">//封装函数</span>            <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment">//获取回调函数的执行结果</span>                    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//判断回调函数结果类型</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">//如果是Promise类型的对象状态跟Promise状态一致</span>                        result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                            <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                            <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment">//若结果不为Promise则状态为成功</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//调用回调函数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> <span class="token string">'resolved'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">callback</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> <span class="token string">'rejected'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">callback</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//在执行异步任务时，先指定回调，后改变的状态，所以无法执行上面两个回调，这时我们得给它添加一个入口</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//需要在状态改变后执行回调，这里将回调函数保存到外面</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    <span class="token function-variable function">onResolved</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">callback</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token function-variable function">onRejected</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">callback</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//catch方法封装</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加resolve方法</span>    <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//返回Promise对象</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加reject方法</span>    <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加all方法</span>    <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token comment">//不用push是因为存在异步任务，使用push会使返回的promises的值顺序改变</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加resolve方法</span>    <span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h4><hr><h5 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h5><ul><li>函数的返回值为promise对象</li><li>promise对象的结果由async函数执行的返回值决定</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//如果返回值是一个非Promise类型的数据，其结果为一个成功的Promise对象</span>   <span class="token keyword">return</span> <span class="token number">111</span><span class="token punctuation">;</span>   <span class="token comment">//成功的结果值为111</span>      <span class="token comment">//如果返回值是一个Promise对象，则结果为该返回对象的状态和值</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment">//如果抛出异常，返回的结果为失败的Promise对象，值为抛出的异常</span>   <span class="token keyword">throw</span> <span class="token string">'oh no'</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="await表达式"><a href="#await表达式" class="headerlink" title="await表达式"></a>await表达式</h5><ul><li>await右侧的表达式一般为promise对象，但也可以是其他二点值</li><li>如果表达式是promise对象，await返回的是promise成功的值</li><li>如果表达式是其他值，直接将此值作为await的返回值</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">//1. 右侧为promise的情况</span>   <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> p<span class="token punctuation">;</span>      <span class="token comment">//2. 右侧为其他类型的数据</span>   <span class="token keyword">let</span> res2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token number">20</span><span class="token punctuation">;</span>      <span class="token comment">//3. 如果promise是失败的状态</span>   <span class="token keyword">try</span><span class="token punctuation">{</span>   <span class="token keyword">let</span> res3 <span class="token operator">=</span> <span class="token keyword">await</span> p<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ul><li>await必须写在async函数中，但async函数中可以没有await</li><li>如果await的promise失败了，就会抛出异常，需要通过try…catch捕获处理</li></ul>]]></content>
      
      
      <categories>
          
          <category> Promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重写Promise </tag>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise | 入门</title>
      <link href="2021/02/25/Promise/%E6%AD%BB%E7%A3%95Promise-1/"/>
      <url>2021/02/25/Promise/%E6%AD%BB%E7%A3%95Promise-1/</url>
      
        <content type="html"><![CDATA[<h4 id="Promise简介"><a href="#Promise简介" class="headerlink" title="Promise简介"></a>Promise简介</h4><hr><blockquote><h5 id="Promise是什么？"><a href="#Promise是什么？" class="headerlink" title="Promise是什么？"></a>Promise是什么？</h5><p>抽象表达：</p><ul><li>Promise 是一门新的技术(ES6 规范)</li><li>Promise 是 JS 中进行异步编程的新解决方案（旧方案是单纯使用回调函数）</li></ul><p>具体表达</p><ul><li>从语法上来说: Promise 是一个构造函数</li><li>从功能上来说: promise 对象用来封装一个异步操作并可以获取其成功/ 失败的结果值</li></ul></blockquote><h5 id="Promise的基本流程"><a href="#Promise的基本流程" class="headerlink" title="Promise的基本流程"></a>Promise的基本流程</h5><p><img src="https://image.flamingow.cn/images/2021/02/25/Promise.png"></p><ul><li>pendding状态是Promise实例对象中的一个属性<code>PromiseState</code>，他的值有三个：pending、resolved、rejected</li><li>promise的状态改变只有以下两种方式，且一个promise对象只能改变一次，无论变为成功还是失败, 都会有一个结果数据，成功的结果数据一般称为 value, 失败的结果数据一般称为 reason：<ul><li>pending 变为 resolved</li><li>pending 变为 rejected</li></ul></li><li>promise对象的值：是promise实例对象中的另一个属性<code>PromiseResult</code>，保存着异步任务成功/失败的结果，以下两个函数可以对该属性进行修改<ul><li>resolve()</li><li>reject()</li></ul></li></ul><h5 id="为什么要用Promise："><a href="#为什么要用Promise：" class="headerlink" title="为什么要用Promise："></a>为什么要用Promise：</h5><ul><li>指定回调函数的方式更加灵活</li></ul><blockquote><p><strong>promise的方式：</strong></p><p>启动异步任务 →返回promie对象→ 给promise对象绑定回调函数（甚至可以在异步任务结束后指定/多个）</p></blockquote><ul><li>支持链式调用，可以解决回调地狱问题</li></ul><blockquote><p>**什么是回调地狱? **</p><p>回调函数嵌套调用，外部回调函数异步执行的结果是嵌套的回调执行的条件。</p><p><strong>回调地狱的缺点？</strong></p><p>不便于阅读，不便于异常处理。</p><p><strong>如何解决该现象？</strong></p><p>promise链式调用。</p><p><strong>终极解决方案</strong></p><p>async/await</p></blockquote><h5 id="Promise的基本形式："><a href="#Promise的基本形式：" class="headerlink" title="Promise的基本形式："></a>Promise的基本形式：</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// resolve 解决  函数类型的数据</span><span class="token comment">// reject  拒绝  函数类型的数据</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token comment">//此处可以包裹一个回调函数</span>     <span class="token comment">//判断</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 promise 对象的状态设置为 『成功』</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将 promise 对象的状态设置为 『失败』</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//调用 then 方法</span><span class="token comment">// value 值</span><span class="token comment">// reason 理由</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token comment">//执行语句</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token comment">//执行语句</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise使用方法"><a href="#Promise使用方法" class="headerlink" title="Promise使用方法"></a>Promise使用方法</h4><hr><h5 id="API"><a href="#API" class="headerlink" title="API"></a>API</h5><pre class="line-numbers language-none"><code class="language-none">1、Promise构造函数: Promise (excutor) {}1）executor函数:执行器(resolve, reject) =&gt; {}2）resolve函数:内部定义成功时我们调用的函数 value =&gt; {}3）reject 函数:内部定义失败时我们调用的函数 reason =&gt; {}说明：executor会在Promise内部立即同步调用,异步操作在执行器中执行2、Promise.prototype.then方法:(onResolved, onRejected) =&gt; {}1）onResolved函数:成功的回调函数 (value) =&gt; {}2）onRejected函数:失败的回调函数 (reason) =&gt; {}说明：指定用于得到成功value的成功回调和用于得到失败reason的失败回调返回一个新的promise对象3、Promise.prototype.catch方法: (onRejected) =&gt; {}1）onRejected函数:失败的回调函数 (reason) =&gt; {}说明：then()的语法糖,相当于:then(undefined, onRejected)4、Promise.resolve方法: (value) =&gt; {}1） value: 成功的数据或 promise 对象说明：返回一个成功/失败的 promise 对象，如果传入的参数为 非Promise类型的对象, 则返回的结果为成功promise对象；如果传入的参数为 Promise 对象, 则参数的结果决定了 resolve 的结果5、Promise.reject方法: (reason) =&gt; {}1）reason:失败的原因说明：返回一个失败的promise对象6、Promise.all方法: (promises) =&gt; {}1）promises:包含n个promise的数组说明：返回一个新的promise,只有所有的promise都成功才成功,只要有一个失败了就直接失败7、Promise.race 方法: (promises) =&gt; {}1）promises: 包含 n 个 promise 的数组说明：返回一个新的 promise, 第一个完成的 promise 的结果状态就是最终的结果状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Promise里面的几个关键问题"><a href="#Promise里面的几个关键问题" class="headerlink" title="Promise里面的几个关键问题"></a>Promise里面的几个关键问题</h5><ul><li><p>如何改变 promise 的状态?</p><pre class="line-numbers language-none"><code class="language-none">1）resolve(value): 如果当前是 pending 就会变为 resolved2）reject(reason): 如果当前是 pending 就会变为 rejected3）抛出异常: 如果当前是 pending 就会变为 rejected<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>一个 promise 指定多个成功/失败回调函数, 都会调用吗?</p><pre class="line-numbers language-none"><code class="language-none">1）当 promise 改变为对应状态时都会调用<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>改变 promise 状态和<strong>指定</strong>回调函数谁先谁后?</p><pre class="line-numbers language-none"><code class="language-none">1）都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调2）如何先改状态再指定回调?——在执行器中直接调用 resolve()/reject()——延迟更长时间才调用 then()3）什么时候才能得到数据?——如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据——如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>promise.then()返回的新 promise 的结果状态由什么决定?</p><pre class="line-numbers language-none"><code class="language-none">1）简单表达: 由 then()指定的回调函数执行的结果决定2）详细表达:——如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常——如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值——如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>promise 如何串连多个操作任务?</p><pre class="line-numbers language-none"><code class="language-none">1）promise 的 then()返回一个新的 promise, 可以开成 then()的链式调用2）通过 then 的链式调用串连多个同步/异步任务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ul><li><p>什么是promise 异常传透?</p><pre class="line-numbers language-none"><code class="language-none">1）当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调2）前面任何操作出了异常, 都会传到最后失败的回调中处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ul><li><p>如何中断 promise 链?</p><pre class="line-numbers language-none"><code class="language-none">1）当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数2）办法: 在回调函数中返回一个 pendding 状态的 promise 对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise-API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕React（四）</title>
      <link href="2021/02/24/React/%E6%AD%BB%E7%A3%95React-4/"/>
      <url>2021/02/24/React/%E6%AD%BB%E7%A3%95React-4/</url>
      
        <content type="html"><![CDATA[<h4 id="React脚手架项目结构"><a href="#React脚手架项目结构" class="headerlink" title="React脚手架项目结构"></a>React脚手架项目结构</h4><hr><p><img src="https://image.flamingow.cn/images/2021/02/24/React.md.png"></p><h5 id="index-html文件中的一些了解性知识："><a href="#index-html文件中的一些了解性知识：" class="headerlink" title="index.html文件中的一些了解性知识："></a>index.html文件中的一些了解性知识：</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- %PUBLIC_URL%代表public文件夹的路径 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 开启理想视口，用于做移动端网页的适配 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 用于配置浏览器页签+地址栏的颜色(仅支持安卓手机浏览器) --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-color<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 页面描述 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Web site created using create-react-app<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 用于ios手机指定网页添加到手机主屏幕后的图标 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/logo192.png<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 应用加壳时的配置文件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/manifest.json<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="界面组件化编码流程（通用）"><a href="#界面组件化编码流程（通用）" class="headerlink" title="界面组件化编码流程（通用）"></a>界面组件化编码流程（通用）</h4><hr><ul><li>拆分组件：拆分组件，抽取组件</li><li>实现静态组件：使用组件实现静态页面效果</li><li>实现动态组件：<ul><li>数据类型</li><li>数据名称</li><li>数据保存在哪个组件？</li></ul></li><li>交互（从绑定事件监听开始）</li></ul><h4 id="TodoList案例总结"><a href="#TodoList案例总结" class="headerlink" title="TodoList案例总结"></a>TodoList案例总结</h4><hr><ul><li>能熟悉的将一个功能界面拆分成组件、实现静态组件，注意在脚手架里className、style的写法</li><li>动态初始化列表，如何确定将数据放在哪个组建的state中？<ul><li>数据仅某个组件使用：放在其自身的state中</li><li>某些组件使用：放在他们共同的父组件state中（也就是状态提升）</li></ul></li><li>关于父子组件之间的通信：<ul><li>【父组件】给【子组件】传递数据：通过props传递</li><li>【子组件】给【父组件】传递数据：通过props传递，要求提前给子组件传递一个函数</li></ul></li><li>注意defaultChecked和checked的区别，类似的还有defaultValue和value，前者只在第一次指定值时起作用</li><li>状态在哪里，操作状态的方法就在哪</li></ul><h4 id="React-Ajax"><a href="#React-Ajax" class="headerlink" title="React Ajax"></a>React Ajax</h4><hr><blockquote><p>React本身只关注于界面，并不包含发送ajax请求的代码。</p><p>前端应用需要通过ajax请求与后台及逆行交互（json数据）</p><p>react应用中需要姬诚第三方ajax库或自己封装</p></blockquote><h5 id="常用的ajax请求库"><a href="#常用的ajax请求库" class="headerlink" title="常用的ajax请求库"></a>常用的ajax请求库</h5><ul><li>jQuery：比较重，如果需要另外引入不建议使用</li><li>axios：轻量级，建议使用<ol><li>封装XmlHttpRequest对象的ajax</li><li>promise风格</li><li>可以用在浏览器端和node服务器端</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-create-app </tag>
            
            <tag> react ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo故障日志</title>
      <link href="2021/02/24/Hexo/Hexo%E6%95%85%E9%9A%9C%E6%97%A5%E5%BF%97/"/>
      <url>2021/02/24/Hexo/Hexo%E6%95%85%E9%9A%9C%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在博客的日常使用中我们总能遇到各式各样的问题，很多问题在发生的时候都让人摸不着头脑，只能花费时间在网上翻阅各种文档寻找解决方案，这的确是一个很痛苦的过程(来自一个菜鸟内心最深处的抱怨)。故在此新建了一个帖子，记录建站以来遇到的各种问题以及解决方案，此贴长期更新，旨在今后遇到同样的问题能快速找到解决方案，倘若能帮助到你那更能证明这是一件有意义的事情。</p></blockquote><h4 id="2021-2-24-Hexo部署出现Spawn-failed错误"><a href="#2021-2-24-Hexo部署出现Spawn-failed错误" class="headerlink" title="2021-2-24  Hexo部署出现Spawn failed错误"></a>2021-2-24  Hexo部署出现Spawn failed错误</h4><hr><h5 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h5><p>在部署博客<code>git g -d</code>时bash窗口出现如下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: Spawn failed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h5><p>问题大多是git在进行<code>hexo d</code>或<code>push</code>操作时改变了一下<code>.depoloy_git</code>文件下的内容。</p><h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><ul><li>简单粗暴的方法：<ol><li>删除网站根目录下的<code>.depoloy_git</code>文件夹</li><li>bash里面输入<code>git config --global core.autocrlf false</code></li><li>然后依次执行<code>hexo clean</code>,<code>hexo g -d</code>完成博客的部署</li></ol></li><li>还有另一种解决方法是将<code>.depoloy_git</code>文件夹的内容回滚到和github上同步的版本，因为我的博客暂未部署到github上面，并未采用此种方案，原文链接<a href="https://perry96.com/archives/882898e3.html">点击此处</a>查看。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chevereto图床搭建极简教程</title>
      <link href="2021/02/23/Hexo/Chevereto%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
      <url>2021/02/23/Hexo/Chevereto%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>chevereto是一款开源图像托管软件，功能齐全，颜值很高，分为付费版和免费版，主要是储存容量上的区别，我主要用来存储博客上的各种图片，目前免费版完全满足我的使用。chevereto的安装十分简单，下面就介绍一下如何利用宝塔面板安装chevereto最新免费版。</p></blockquote><h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><hr><h5 id="相关资源链接："><a href="#相关资源链接：" class="headerlink" title="相关资源链接："></a>相关资源链接：</h5><p><a href="https://chevereto.com/">chevereto官网</a></p><p>github：<a href="https://chevereto.com/">程序下载地址</a></p><h5 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h5><ol><li>宝塔面板</li><li>PHP5.5以上</li><li>MySQL5.6</li></ol><h4 id="安装和部署"><a href="#安装和部署" class="headerlink" title="安装和部署"></a>安装和部署</h4><hr><h5 id="添加域名"><a href="#添加域名" class="headerlink" title="添加域名"></a>添加域名</h5><p>在宝塔面板的网站页面新点击添加站点，FTP不创建，数据库需要创建，数据库账号以及密码后续安装会用到，其他默认选项即可</p><p><img src="https://image.flamingow.cn/images/2021/02/24/pic0.png"></p><h5 id="下载程序到网站根目录"><a href="#下载程序到网站根目录" class="headerlink" title="下载程序到网站根目录"></a>下载程序到网站根目录</h5><p>如图所示，将程序下载至网站根目录，并解压，注意将解压后的所有文件都移至网站根目录。</p><p><img src="https://image.flamingow.cn/images/2021/02/24/pic1.png"></p><h5 id="设置伪静态"><a href="#设置伪静态" class="headerlink" title="设置伪静态"></a>设置伪静态</h5><hr><p>在安装之前设置伪静态，代码如下所示：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span><span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token operator">?</span><span class="token variable">$query_string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改位置：网站→你的网站名→伪静态：</p><p><img src="https://image.flamingow.cn/images/2021/02/24/pic2.png"></p><h5 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h5><p>直接用浏览器访问你的域名，开始安装操作，在此输入刚才添加站点时数据库的相关信息：</p><p><img src="https://image.flamingow.cn/images/2021/02/24/pic3.png"></p><h5 id="设置语言为中文"><a href="#设置语言为中文" class="headerlink" title="设置语言为中文"></a>设置语言为中文</h5><p>安装完成后在setting里面将语言设置为中文，至此，整个图床搭建完成。</p><p><img src="https://image.flamingow.cn/images/2021/02/24/pic4.png"></p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><hr><p>chevereto里还有很多强大实用的功能我就不在此赘述，哪怕只是免费版，也完美的解决了我当时的需求，在此附上最后的成果：</p><p><strong><a href="https://image.flamingow.cn/">FlamingoW’s Image Hosting</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 博客建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chevereto </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕React（三）</title>
      <link href="2021/02/22/React/%E6%AD%BB%E7%A3%95React-3/"/>
      <url>2021/02/22/React/%E6%AD%BB%E7%A3%95React-3/</url>
      
        <content type="html"><![CDATA[<h4 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h4><hr><blockquote><p>组件从创建到死亡会经历一些特定的阶段。</p><p>React组件包含一系列勾子函数（生命周期回调函数），会在特定的时刻调用。</p><p>我们在定义组件时，会在特定的生命周期回调函数中，做特定的工作。</p></blockquote><h5 id="生命周期流程图（旧）"><a href="#生命周期流程图（旧）" class="headerlink" title="生命周期流程图（旧）"></a>生命周期流程图（旧）</h5><hr><p><a href="https://image.flamingow.cn/image/CAo"><img src="https://image.flamingow.cn/images/2021/02/24/react.png" alt="react生命周期（旧）"></a></p><ul><li><strong>初始化阶段：</strong>由<code>ReactDOM.render()</code>触发—初次渲染<ol><li><code>constructor()</code></li><li><code>componentWillMount()</code></li><li><code>render()</code></li><li><code>componentDidMount()</code>：<strong>常用</strong>，一般在这个钩子里面做一些初始化的事，如：开启定时器、发送网络请求、订阅消息</li></ol></li><li><strong>更新阶段：</strong>由组件内部<code>this.setSate()</code>或父组件重新render触发<ol><li><code>shouldComponentUpdate()</code>：控制组件更新的“阀门”，默认返回为true，若为false，则后面的步骤无法执行</li><li><code>componentWillUpdate()</code>：组件将要更新的钩子</li><li><code>render()</code></li><li><code>componentDidUpdate()</code>：组件更新完毕的钩子</li></ol></li><li><strong>卸载组件：</strong>由<code>ReactDOM.unmountComponentAtNode()</code>触发<ol><li><code>componentWillUnmount()</code>：<strong>常用</strong>，一般在这个钩子中做一下收尾的事，如：关闭定时器、取消订阅消息</li></ol></li><li>其他：<ol><li><code>componentWillReceiveProps()</code>：初始化render时不执行，当props发生变化时执行。在这个回调函数里面，你可以根据属性的变化，通过调用this.setState()来更新你的组件状态，旧的属性还是可以通过this.props来获取,这里调用更新状态是安全的，并不会触发额外的render调用。</li><li>关于强制更新<code>forceUpdate()</code>：他的使用方法类似setUpdate。调用forceUpdate()会导致组件跳过shouldComponentUpdate(),直接调用render()。这将触发组件的正常生命周期方法,包括每个子组件的shouldComponentUpdate()方法。forceUpdate就是重新render。有些变量不在state上，当时你又想达到这个变量更新的时候，刷新render；或者state里的某个变量层次太深，更新的时候没有自动触发render。这些时候都可以手动调用forceUpdate自动触发render</li></ol></li></ul><h5 id="生命周期流程图（新）"><a href="#生命周期流程图（新）" class="headerlink" title="生命周期流程图（新）"></a>生命周期流程图（新）</h5><hr><p><a href="https://image.flamingow.cn/image/HGr"><img src="https://image.flamingow.cn/images/2021/02/24/react9ca5a7906cfc9978.png" alt="react生命周期（新）"></a></p><ul><li><strong>初始阶段：</strong>由<code>ReactDOM.render()</code>触发—初次渲染<ol><li><code>constructor()</code></li><li>**<code>getDerivedStateFromProps()</code>**：会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。</li><li><code>render()</code></li><li><code>componentDidMount()</code>：<strong>常用</strong>，一般在这个钩子里面做一些初始化的事，如：开启定时器、发送网络请求、订阅消息</li></ol></li><li><strong>更新阶段：</strong>由组件内部<code>this.setSate()</code>或父组件重新render触发<ol><li><strong><code>getDerivedStateFromProps()</code></strong></li><li><code>shouldComponentUpdate()</code></li><li><code>render()</code></li><li>**<code>getSnapshotBeforeUpdate()</code>**：在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期的任何返回值将作为参数传递给 componentDidUpdate()。也就是在更新之前获取快照。</li><li><code>componentDidUpdate()</code></li></ol></li><li><strong>卸载组件：</strong> 由<code>ReactDOM.unmountComponentAtNode()</code>触发<ol><li><code>componentWillUnmount()</code>：<strong>常用</strong>，一般在这个钩子中做一下收尾的事，如：关闭定时器、取消订阅消息</li></ol></li></ul><h5 id="重要的钩子"><a href="#重要的钩子" class="headerlink" title="重要的钩子"></a>重要的钩子</h5><hr><ul><li><code>render</code>：初始化渲染或更新渲染调用</li><li><code>componentDidMount</code>：开启监听, 发送ajax请求</li><li><code>componentWillUnmount</code>：做一些收尾工作, 如: 清理定时器</li></ul><h5 id="即将废弃的钩子"><a href="#即将废弃的钩子" class="headerlink" title="即将废弃的钩子"></a>即将废弃的钩子</h5><hr><ul><li><code>componentWillMount</code></li><li><code>componentWillReceiveProps</code></li><li><code>componentWillUpdate</code></li></ul><p>现在使用不会出现警告，在17版本里需要加上<code>UNSAFE_</code>前缀才能使用，以后可能会被彻底废弃，不建议使用。</p><h4 id="Diffing算法"><a href="#Diffing算法" class="headerlink" title="Diffing算法"></a>Diffing算法</h4><hr><blockquote><p>经典问题：</p><ol><li>react/vue中的key有什么作用？（key的内部原理是什么？）</li><li>为什么遍历列表时，key最好不要用index?</li></ol></blockquote><p><img src="https://image.flamingow.cn/images/2021/02/24/diffing.png"></p><ul><li><p>虚拟DOM中key的作用：key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</p><ul><li>当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】,随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：<ol><li>旧虚拟DOM中找到了与新虚拟DOM相同的key：<ul><li>若虚拟DOM中内容没变, 直接使用之前的真实DOM</li><li>若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ul></li><li>旧虚拟DOM中未找到与新虚拟DOM相同的key：<ul><li>根据数据创建新的真实DOM，随后渲染到到页面</li></ul></li><li>比对的单位为节点，处理完当前节点后，继续对子节点进行递归对比</li></ol></li></ul></li><li><p>用index作为key可能会引发的问题：</p><ul><li>若对数据进行：逆序添加、逆序删除等破坏顺序操作:会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</li><li>如果结构中还包含输入类的DOM：会产生错误DOM更新 ==&gt; 界面有问题。</li><li>注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li></ul></li><li><p>开发中如何选择key?</p><ul><li>最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</li><li>如果确定只是简单的展示数据，用index也是可以的。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生命周期 </tag>
            
            <tag> Diffing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕React（二）</title>
      <link href="2021/02/22/React/%E6%AD%BB%E7%A3%95React-2/"/>
      <url>2021/02/22/React/%E6%AD%BB%E7%A3%95React-2/</url>
      
        <content type="html"><![CDATA[<h4 id="包含表单的组件分类"><a href="#包含表单的组件分类" class="headerlink" title="包含表单的组件分类"></a>包含表单的组件分类</h4><hr><p>在大多数情况下，我们建议使用受控组件来实现表单，因为这样可以避免ref的使用。</p><h5 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h5><hr><p>在随着用户的输入，能够控制表单中输入元素的组件被称为受控组件，即每个状态更改都有一个相关联的处理程序。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>运用高阶函数与函数柯里化<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token comment">//创建组件</span><span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>   <span class="token comment">//初始化状态</span>   state <span class="token operator">=</span> <span class="token punctuation">{</span>      username<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">//用户名</span>      password<span class="token operator">:</span><span class="token string">''</span> <span class="token comment">//密码</span>   <span class="token punctuation">}</span><span class="token comment">//保存表单数据到状态中</span><span class="token comment">//这里是一个高阶函数与柯里化函数的应用</span><span class="token function-variable function">saveFormData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dataType</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">[</span>dataType<span class="token punctuation">]</span><span class="token operator">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//这里用[]读取对象属性</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//表单提交的回调</span><span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>   event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//阻止表单提交</span>   <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span>password<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">你输入的用户名是：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,你输入的密码是：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span><span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">         用户名：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFormData</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">         密码：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFormData</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>   <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//渲染组件</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Login</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>不用函数柯里化实现<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token comment">//创建组件</span><span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>   <span class="token comment">//初始化状态</span>   state <span class="token operator">=</span> <span class="token punctuation">{</span>      username<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">//用户名</span>      password<span class="token operator">:</span><span class="token string">''</span> <span class="token comment">//密码</span>   <span class="token punctuation">}</span><span class="token comment">//保存表单数据到状态中</span><span class="token function-variable function">saveFormData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dataType<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">[</span>dataType<span class="token punctuation">]</span><span class="token operator">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//表单提交的回调</span><span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>   event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//阻止表单提交</span>   <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span>password<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">你输入的用户名是：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,你输入的密码是：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span><span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">         用户名：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFormData</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span> <span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">         密码：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFormData</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span> <span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>   <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//渲染组件</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Login</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h5><hr><p>非受控组件是在内部存储其自身状态的组件，当需要时，可以使用 ref 查询 DOM 并查找其当前值。类似传统的HTML。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//创建组件</span><span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span><span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//阻止表单提交</span><span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span>password<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">你输入的用户名是：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,你输入的密码是：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>password<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">用户名：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> c<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">密码：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> c<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//渲染组件</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Login</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="高阶函数与函数柯里化"><a href="#高阶函数与函数柯里化" class="headerlink" title="高阶函数与函数柯里化"></a>高阶函数与函数柯里化</h4><hr><h5 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h5><p>如果一个函数符合下面两个规范中的任何一个，那该函数就是高阶函数：</p><blockquote><ul><li>若A函数，接收的参数是一个函数。</li><li>若A函数，调用的返回值依然是一个函数。</li></ul></blockquote><p>常见的高阶函数：Promise、setTimeout、arr.map()等等。</p><h5 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h5><p>通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表单组件 </tag>
            
            <tag> 高阶函数 </tag>
            
            <tag> 函数柯里化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探ES6（一）</title>
      <link href="2021/02/22/ES6/%E5%88%9D%E6%8E%A2ES6-1/"/>
      <url>2021/02/22/ES6/%E5%88%9D%E6%8E%A2ES6-1/</url>
      
        <content type="html"><![CDATA[<h4 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h4><hr><blockquote><p><strong>前言：</strong></p><p>ECMAScript 和 JavaScript 的关系：ECMAScript 和 JavaScript 的关系。</p><p>ES6 与 ECMAScript 2015 的关系：ES6 既是一个历史名词，也是一个泛指，含义是5.1版以后的 JavaScript 的下一代标准，涵盖了ES2015、ES2016、ES2017等等。</p><p>各大浏览器对ES6的支持情况可以<a href="http://kangax.github.io/compat-table/es6/">点击此处</a>查看。</p></blockquote><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><hr><p>浏览器并不能完全识别ES6代码，因此我们需要使用Babel转码器，将ES6代码转为ES5代码，为此我们需要配置相关的环境。</p><ul><li><p>node：<a href="http://nodejs.cn/">node官网</a></p></li><li><p>通过脚手架的方式把Bable、webpack等的配置直接生成好：</p><ul><li><p>初始化项目：es10-cli是提供给我们的脚手架、create是创建项目的命令、projectName是要创建项目的目录名称。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx es10-cli create projesName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动项目：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> projectName<span class="token function">npm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>IDE Config（VS Code）：配置一些插件方便编程，这一步也可以忽略。</p><ul><li>Beautify：代码格式化</li><li>ESList：eslint检查</li></ul></li></ul><h4 id="Let-amp-Const"><a href="#Let-amp-Const" class="headerlink" title="Let &amp; Const"></a>Let &amp; Const</h4><hr><h5 id="let"><a href="#let" class="headerlink" title="let"></a>let</h5><ul><li>作用：用于声明变量。</li><li>特性：<ul><li>变量不能重复声明</li><li>用let声明的变量只在其所在的块儿级作用域生效</li><li>不存在变量提升</li><li>不影响作用域链</li></ul></li></ul><h5 id="const"><a href="#const" class="headerlink" title="const"></a>const</h5><ul><li>作用：用于声明常量。</li><li>特性：<ul><li>声明时一定要赋初始值</li><li>潜规则，一般常量使用大写</li><li>常量值不能修改</li><li>声明的常量也只在块儿级作用域里生效</li><li>对于数组和对象的元素修改，不算做对常量的修改，不会报错。因为上诉的都是引用值，其地址并没有发生变化。所以我们一般声明对象以及数组时尽量用const</li></ul></li></ul><h4 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h4><hr><p>ES6允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。</p><h5 id="数组的解构"><a href="#数组的解构" class="headerlink" title="数组的解构"></a>数组的解构</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">TEAM</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token string">'张学友'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>liu<span class="token punctuation">,</span> zhang<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">TEAM</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>liu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刘德华</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhang<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//张学友</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">PERSON</span> <span class="token operator">=</span> <span class="token punctuation">{</span>   name<span class="token operator">:</span> <span class="token string">'刘德华'</span><span class="token punctuation">,</span>   age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>   <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"恭喜你发财"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sing<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token constant">LIU</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刘德华</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//18</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//恭喜你发财</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><hr><p>ES6中引入了新的声明字符串的方式[``]</p><h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">This is a string</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//This is a string, string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul><li><p>内容中可以出现换行符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul&gt;   &lt;li&gt;刘德华&lt;/li&gt;   &lt;li&gt;张学友&lt;/li&gt;   &lt;li&gt;郭富城&lt;/li&gt;           &lt;/ul&gt;</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以直接进行变量拼接</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> star <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">刘德华</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> sing <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>star<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">会唱歌</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sing<span class="token punctuation">)</span><span class="token comment">//刘德华会唱歌</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="简化对象写法"><a href="#简化对象写法" class="headerlink" title="简化对象写法"></a>简化对象写法</h4><hr><p>ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法，这样的书写更加简洁。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'刘德华'</span>；<span class="token keyword">let</span> <span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'恭喜你发财！'</span><span class="token punctuation">)</span>；<span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token constant">PERSON</span> <span class="token operator">=</span> <span class="token punctuation">{</span>   name<span class="token punctuation">,</span>   sing<span class="token punctuation">,</span>   <span class="token function">improve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'新年新气象！'</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PERSON</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刘德华</span><span class="token constant">PERSON</span><span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//恭喜你发财！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMAScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕React（一）</title>
      <link href="2021/02/17/React/%E6%AD%BB%E7%A3%95React-1/"/>
      <url>2021/02/17/React/%E6%AD%BB%E7%A3%95React-1/</url>
      
        <content type="html"><![CDATA[<h4 id="React入门"><a href="#React入门" class="headerlink" title="React入门"></a>React入门</h4><hr><h5 id="相关js库："><a href="#相关js库：" class="headerlink" title="相关js库："></a>相关js库：</h5><ul><li>react.js：React核心库</li><li>react-dom.js：提供操作DOM的react扩展库</li><li>babel.min.js：解析JSX语法代码转为JS代码的库</li></ul><h5 id="创建虚拟DOM的两种方式："><a href="#创建虚拟DOM的两种方式：" class="headerlink" title="创建虚拟DOM的两种方式："></a>创建虚拟DOM的两种方式：</h5><ol><li><p>jsx创建：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">   const VDOM = (      &lt;div id='title'&gt;         &lt;span&gt;Hello,React&lt;/span&gt;      &lt;/div&gt;   )</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>js创建：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token string">'title'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'Hello,React'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="关于虚拟DOM："><a href="#关于虚拟DOM：" class="headerlink" title="关于虚拟DOM："></a>关于虚拟DOM：</h5><ul><li>本质是Object类型的对象。</li><li>虚拟DOM比真实DOM多具有的属性少，因为虚拟DOM是React内部在用，无需真实DOM上那么多的属性。</li><li>虚拟DOM最终会被React转化为真实DOM，呈现在页面上。</li></ul><h5 id="jsx语法规则："><a href="#jsx语法规则：" class="headerlink" title="jsx语法规则："></a>jsx语法规则：</h5><ul><li>定义虚拟DOM时，不用写引号。</li><li>标签中混入JS表达式时要用{}。</li><li>样式的类名指定不要用class，得用className(ES6中类的关键字为class，所以此处用className)。</li><li>内联样式要用<code>style={{key:value}}</code>来写。</li><li>虚拟DOM中只能有一个根标签。</li><li>标签必须闭合，如input。</li><li>标签首字母<ol><li>若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错。</li><li>若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。</li></ol></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> myId <span class="token operator">=</span> <span class="token string">'ws'</span><span class="token keyword">const</span> myData <span class="token operator">=</span> <span class="token string">'Hello,React'</span><span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>myId<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token operator">:</span><span class="token string">'white'</span><span class="token punctuation">,</span>fontSize<span class="token operator">:</span><span class="token string">'29px'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>myData<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>myId<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token operator">:</span><span class="token string">'white'</span><span class="token punctuation">,</span>fontSize<span class="token operator">:</span><span class="token string">'29px'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>myData<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模块与组件"><a href="#模块与组件" class="headerlink" title="模块与组件"></a>模块与组件</h4><hr><h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><ul><li>理解：向外提供特定功能的js程序, 一般就是一个js文件</li><li>需求来源：随着业务逻辑增加，代码越来越多且复杂</li><li>作用：复用js, 简化js的编写, 提高js运行效率</li></ul><h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><ul><li>理解：用来实现局部功能效果的代码和资源的集合(html/css/js/image等等)</li><li>需求来源：界面的功能更加复杂</li><li>作用：复用编码, 简化项目编码, 提高运行效率</li></ul><h5 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h5><p>当应用的js都以模块来编写的, 这个应用就是一个模块化的应用。</p><h5 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h5><p>当应用是以多组件的方式实现, 这个应用就是一个组件化的应用</p><h5 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h5><p>通过类如webpack构建工具完成的项目，叫做工程化项目</p><h4 id="React面向组件编程"><a href="#React面向组件编程" class="headerlink" title="React面向组件编程"></a>React面向组件编程</h4><hr><h5 id="jsx创建组件"><a href="#jsx创建组件" class="headerlink" title="jsx创建组件"></a>jsx创建组件</h5><ul><li><p>创建函数式组件</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span>   <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">这是用函数定义的组件（适用于【简单组件】的定义）</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Demo</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//this原本应是window，因为babel编译后开启了严格模式，所以变成了undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建类式组件</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">  <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>     <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">这是用类定义的组件（适用于【复杂组件】的定义）</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">//render是放在Demo的原型对象上，供实例使用</span><span class="token comment">//render中的this是Demo组件实例对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="组件实例的三大属性"><a href="#组件实例的三大属性" class="headerlink" title="组件实例的三大属性"></a>组件实例的三大属性</h5><h5 id="state"><a href="#state" class="headerlink" title="state"></a>state</h5><ul><li>理解：<ul><li>state是组件对象最重要的属性，值是对象（可以包含多个key-value的组合）</li><li>组件被称为“状态机”，通过根性组建的state来更新对一个的页面显示（重新渲染组件）</li></ul></li><li>注意：<ul><li>组件中render方法中的this为组件实例对象</li><li>组件自定义方法中this为undefined，如何解决？<ul><li>强制绑定this：通过函数对象的bind()</li><li>箭头函数</li></ul></li><li>数据状态不能直接修改或更新</li></ul></li><li>案例：</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//未简写方式（方便理解）</span><span class="token comment">//1.创建组件</span><span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span><span class="token comment">//构造器调用几次？ ———— 1次</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'constructor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token comment">//初始化状态</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>isHot<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>wind<span class="token operator">:</span><span class="token string">'微风'</span><span class="token punctuation">}</span><span class="token comment">//解决changeWeather中this指向问题</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeWeather</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//render调用几次？ ———— 1+n次 1是初始化的那次 n是状态更新的次数</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取状态</span><span class="token keyword">const</span> <span class="token punctuation">{</span>isHot<span class="token punctuation">,</span>wind<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">今天天气很</span><span class="token punctuation">{</span>isHot <span class="token operator">?</span> <span class="token string">'炎热'</span> <span class="token operator">:</span> <span class="token string">'凉爽'</span><span class="token punctuation">}</span><span class="token plain-text">，</span><span class="token punctuation">{</span>wind<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token comment">//changeWeather调用几次？ ———— 点几次调几次</span><span class="token function">changeWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//changeWeather放在哪里？ ———— Weather的原型对象上，供实例使用</span><span class="token comment">//由于changeWeather是作为onClick的回调，所以不是通过实例调用的，是直接调用</span><span class="token comment">//类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'changeWeather'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取原来的isHot值</span><span class="token keyword">const</span> isHot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot<span class="token comment">//严重注意：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>isHot<span class="token operator">:</span><span class="token operator">!</span>isHot<span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//严重注意：状态(state)不可直接更改，下面这行就是直接更改！！！</span><span class="token comment">//this.state.isHot = !isHot //这是错误的写法</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//2.渲染组件到页面</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment">//简写方式</span><span class="token comment">//1.创建组件</span><span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span><span class="token comment">//初始化状态</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>isHot<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>wind<span class="token operator">:</span><span class="token string">'微风'</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token punctuation">{</span>isHot<span class="token punctuation">,</span>wind<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">今天天气很</span><span class="token punctuation">{</span>isHot <span class="token operator">?</span> <span class="token string">'炎热'</span> <span class="token operator">:</span> <span class="token string">'凉爽'</span><span class="token punctuation">}</span><span class="token plain-text">，</span><span class="token punctuation">{</span>wind<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token comment">//自定义方法————要用赋值语句的形式+箭头函数</span><span class="token function-variable function">changeWeather</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">const</span> isHot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>isHot<span class="token operator">:</span><span class="token operator">!</span>isHot<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//2.渲染组件到页面</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="props"><a href="#props" class="headerlink" title="props"></a>props</h5><ul><li><p>理解</p><ul><li>每个组件对象都队友props属性</li><li>组件标签的所有属性都保存在props中</li></ul></li><li><p>作用：</p><ul><li>通过标签属性从组件外向组件内传递变化的数据</li><li>注意——组件内部不要修改props数据</li></ul></li><li><p>语法：</p><ul><li><p>内部读取某个属性值：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对props中的属性值进行<strong>类型限制</strong>和<strong>必要性限制</strong>：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">person<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>age<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>speak<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>扩展属性：将对象的所有属性通过props传递</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>persom</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">person</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>组件类的构造函数：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token comment">//打印所有属性</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>案例：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//创建组件</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//构造器是否接收props，是否传递给super，取决于：是否希望在构造器中通过this访问props</span><span class="token comment">// console.log(props);</span><span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'constructor'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//对标签属性进行类型、必要性的限制</span><span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span> <span class="token comment">//限制name必传，且为字符串</span>sex<span class="token operator">:</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span><span class="token comment">//限制sex为字符串</span>age<span class="token operator">:</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span><span class="token comment">//限制age为数值</span><span class="token punctuation">}</span><span class="token comment">//指定默认标签属性值</span><span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token comment">//sex默认值为男</span>age<span class="token operator">:</span><span class="token number">18</span> <span class="token comment">//age默认值为18</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// console.log(this);</span><span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token comment">//props是只读的</span><span class="token comment">//this.props.name = 'jack' //此行代码会报错，因为props是只读的</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">姓名：</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">性别：</span><span class="token punctuation">{</span>sex<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">年龄：</span><span class="token punctuation">{</span>age<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//渲染组件到页面</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jerry<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">//在函数组件中使用props：</span><span class="token comment">//创建组件</span><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">姓名：</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">性别：</span><span class="token punctuation">{</span>sex<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">年龄：</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span> <span class="token comment">//限制name必传，且为字符串</span>sex<span class="token operator">:</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span><span class="token comment">//限制sex为字符串</span>age<span class="token operator">:</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span><span class="token comment">//限制age为数值</span><span class="token punctuation">}</span><span class="token comment">//指定默认标签属性值</span>Person<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token comment">//sex默认值为男</span>age<span class="token operator">:</span><span class="token number">18</span> <span class="token comment">//age默认值为18</span><span class="token punctuation">}</span><span class="token comment">//渲染组件到页面</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jerry<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h5><ul><li><p>理解：</p><ul><li>组件内的标签可以定义ref属性来标识自己</li></ul></li><li><p>语法：</p><ul><li><p>字符串形式的ref：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">//不推荐，存在降低效率的问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>回调形式的ref：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">currenNode</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">=</span> currenNode<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">//如果 ref 回调函数是以内联函数的方式定义的，在更新过程中它会被执行两次，第一次传入参数 null，然后第二次会传入参数 DOM 元素。</span><span class="token comment">//这个小问题在大多数情况下是无关紧要的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>createRef创建ref容器：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">myRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">//一个容器对应一个实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>案例：回调函数形式的ref</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//创建组件</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span><span class="token comment">//展示左侧输入框的数据</span><span class="token function-variable function">showData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token punctuation">{</span>input1<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token function">alert</span><span class="token punctuation">(</span>input1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//展示右侧输入框的数据</span><span class="token function-variable function">showData2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token punctuation">{</span>input2<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token function">alert</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">=</span> c <span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点击按钮提示数据<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>showData<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">点我提示左侧的数据</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onBlur</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>showData2<span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input2 <span class="token operator">=</span> c <span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>失去焦点提示数据<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//渲染组件到页面</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Demo</span></span> <span class="token attr-name">a</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">b</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>事件处理</p><ul><li><p>通过onXxx属性指定事件处理函数(注意大小写)</p><ul><li> React使用的是自定义(合成)事件, 而不是使用的原生DOM事件——为了更好的兼容性</li><li>React中的事件是通过事件委托方式处理的(委托给组件最外层的元素)——为了高效</li></ul></li><li><p>通过event.target得到发生事件的DOM元素对象——不要过度使用ref</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function-variable function">showData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//发生事件的元素正好是我们要操作的元素，可以省略ref采用上面这种方法。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（十三）</title>
      <link href="2021/01/15/JavaScript/%E6%AD%BB%E7%A3%95JavaScript-13/"/>
      <url>2021/01/15/JavaScript/%E6%AD%BB%E7%A3%95JavaScript-13/</url>
      
        <content type="html"><![CDATA[<h5 id="转义字符：-（反斜杠）"><a href="#转义字符：-（反斜杠）" class="headerlink" title="转义字符：\（反斜杠）"></a>转义字符：\（反斜杠）</h5><hr><p>使反斜杠后面的字符失去原来的作用，如引号；还可以在写js代码时实现多行字符串的（在每行字符串后面加一个\）;还可以配合一些字符产生新的作用：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">\r //行结束符\n //字符串换行符\t //制表符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>正则表达式的作用：匹配特殊字符或有特殊搭配原则的字符的最佳选择。</p></blockquote><h5 id="正则表达式创建方法"><a href="#正则表达式创建方法" class="headerlink" title="正则表达式创建方法"></a>正则表达式创建方法</h5><hr><ul><li><p>直接量语法创建：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">//语法:/pattern/attributesvar reg = /abc/i;var str = "abcd";reg.test(str);//返回true，该方法能检索字符串中指定的值。返回 true 或 false。//参数 pattern 是一个字符串，指定了正则表达式的模式或其他正则表达式。//参数attributes 是一个可选的字符串，包含属性 "g"、"i" 和 "m"，分别用于指定全局匹配、区分大小写的匹配和多行匹配。ECMAScript 标准化之前，不支持 m 属性。如果 pattern 是正则表达式，而不是字符串，则必须省略该参数.//i是修饰符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 RegExp 对象的语法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法:new RegExp(pattern, attributes);</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"abCd"</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h5><hr><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>执行对大小写不敏感的匹配</td></tr><tr><td>g</td><td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</td></tr><tr><td>m</td><td>执行多行匹配</td></tr></tbody></table><h5 id="RegExp对象方法"><a href="#RegExp对象方法" class="headerlink" title="RegExp对象方法"></a>RegExp对象方法</h5><hr><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>exec</td><td>检索字符串中指定的值。返回找到的值，并确定其位置。</td></tr><tr><td>test</td><td>检索字符串中指定的值。返回 true 或 false。</td></tr><tr><td>toString</td><td>返回正则表达式的字符串。</td></tr></tbody></table><h5 id="支持正则表达式的String对象的方法"><a href="#支持正则表达式的String对象的方法" class="headerlink" title="支持正则表达式的String对象的方法"></a>支持正则表达式的String对象的方法</h5><hr><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>search</td><td>检索与正则表达式相匹配的值。</td></tr><tr><td>match</td><td>找到一个或多个正则表达式的匹配。</td></tr><tr><td>replace</td><td>替换与正则表达式匹配的子串。</td></tr><tr><td>split</td><td>把字符串分割为字符串数组。</td></tr></tbody></table><h5 id="描述字符"><a href="#描述字符" class="headerlink" title="描述字符"></a>描述字符</h5><hr><p>根据正则表达式语法规则，大部分字符仅能够描述自身，这些字符被称为普通字符，如所有的字母、数字等。</p><p>元字符就是i拥有特定功能的特殊字符，大部分需要加反斜杠进行标识，以便于普通字符进行区别，而少数元字符，需要加反斜杠，以便转译为普通字符使用。</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>查找单个字符，除了换行和行结束符。</td></tr><tr><td>\w</td><td>查找数字、字母及下划线。</td></tr><tr><td>\W</td><td>查找非单词字符。</td></tr><tr><td>\d</td><td>查找数字。</td></tr><tr><td>\D</td><td>查找非数字字符。</td></tr><tr><td>\s</td><td>查找空白字符。</td></tr><tr><td>\S</td><td>查找非空白字符。</td></tr><tr><td>\b</td><td>匹配单词边界。</td></tr><tr><td>\B</td><td>匹配非单词边界。</td></tr><tr><td>\0</td><td>查找 NULL 字符。</td></tr><tr><td>\n</td><td>查找换行符。</td></tr><tr><td>\f</td><td>查找换页符。</td></tr><tr><td>\r</td><td>查找回车符。</td></tr><tr><td>\t</td><td>查找制表符。</td></tr><tr><td>\v</td><td>查找垂直制表符。</td></tr><tr><td>\xxx</td><td>查找以八进制数 xxx 规定的字符。</td></tr><tr><td>\xdd</td><td>查找以十六进制数 dd 规定的字符。</td></tr><tr><td>\uxxxx</td><td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><h5 id="方括号（描述字符范围）"><a href="#方括号（描述字符范围）" class="headerlink" title="方括号（描述字符范围）"></a>方括号（描述字符范围）</h5><hr><p>在正则表达式语法中，方括号表示字符范围。在方括号中可以包含多个字符，表示匹配去哦中任意一个字符。如果多个字符的编码顺序是连续的，可以仅指定开头和结尾字符，省略中间字符，仅使用连字符~表示。如果在方括号内添加脱字符^前缀，还可以表示范围之外的字符，类似与非。</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间的任何字符。</td></tr><tr><td>[^abc]</td><td>查找任何不在方括号之间的字符。</td></tr><tr><td>[0-9]</td><td>查找任何从 0 至 9 的数字。</td></tr><tr><td>[a-z]</td><td>查找任何从小写 a 到小写 z 的字符。</td></tr><tr><td>[A-Z]</td><td>查找任何从大写 A 到大写 Z 的字符。</td></tr><tr><td>[A-z]</td><td>查找任何从大写 A 到小写 z 的字符。</td></tr><tr><td>[adgk]</td><td>查找给定集合内的任何字符。</td></tr><tr><td>[^adgk]</td><td>查找给定集合外的任何字符。</td></tr><tr><td>(red|blue|green)</td><td>查找任何指定的选项。</td></tr></tbody></table><h5 id="选择匹配"><a href="#选择匹配" class="headerlink" title="选择匹配"></a>选择匹配</h5><hr><p>类似于js逻辑与运算，使用竖线$|$描述，表示在两个子模式的匹配结果中任选一个。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//匹配任意数字或字母</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\w+|\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//定义多重选择模式，在多个子模式之间加入选择操作符</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(abc)|(def)|(123)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h5><hr><p>在正则表达式的语法中，定义了一些重复类量词、边界量词、声明量词，如下所示：</p><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td>n+</td><td>匹配任何包含至少一个 n 的字符串。</td></tr><tr><td>n*</td><td>匹配任何包含零个或多个 n 的字符串。</td></tr><tr><td>n?</td><td>例如，/a+/ 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。例如，/bo*/ 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。匹配任何包含零个或一个 n 的字符串。</td></tr><tr><td>n{X}</td><td>例如，/e?le?/ 匹配 “angel” 中的 “el”，”angle” 中的 “le”。匹配包含 X 个 n 的序列的字符串。</td></tr><tr><td>n{X,}</td><td>例如，/a{2}/ 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。</td></tr><tr><td>n{X,Y}</td><td>例如，/a{2,}/ 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。</td></tr><tr><td>n$</td><td>例如，/a{1,3}/ 不匹配 “cndy”，匹配 “candy,” 中的 “a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。匹配任何结尾为 n 的字符串。</td></tr><tr><td>^n</td><td>匹配任何开头为 n 的字符串。</td></tr><tr><td>?=n</td><td>匹配任何其后紧接指定字符串 n 的字符串。</td></tr><tr><td>?!n</td><td>匹配任何其后没有紧接指定字符串 n 的字符串。</td></tr></tbody></table><h5 id="惰性匹配"><a href="#惰性匹配" class="headerlink" title="惰性匹配"></a>惰性匹配</h5><hr><p>重复类量词都具有<strong>贪婪性</strong>，在条件允许的前提下，会匹配尽可能多的字符。</p><p>在正则表达式后面加上？即可使其惰性匹配：</p><ul><li>{n,m}?：尽量匹配 n 次，但是为了满足限定条件也可能最多重复 m 次。</li><li>{n}?：尽量匹配 n 次。</li><li>{n,}?：尽量匹配 n 次，但是为了满足限定条件也可能匹配任意次。</li><li>??：尽量匹配，但是为了满足限定条件也可能最多匹配 1 次，相当于 {0,1}?。</li><li>+?：尽量匹配 1 次，但是为了满足限定条件也可能匹配任意次，相当于 {1,}?。</li><li>*? ：尽量不匹配，但是为了满足限定条件也可能匹配任意次，相当于 {0,}?。</li></ul><h5 id="子表达式"><a href="#子表达式" class="headerlink" title="子表达式"></a>子表达式</h5><hr><p>使用小括号可以对字符模式进行任意分组，在小括号内的字符串表示子表达式，也称为子模式。子表达式具有独立的匹配功能，保存独立的匹配结果；同时，小括号后的量词将会作用于整个子表达式。</p><p>通过分组可以在一个完整的字符模式中定义一个或多个子模式。当正则表达式成功地匹配目标字符串后，也可以从目标字符串中抽出与子模式相匹配的子内容。</p><h5 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h5><hr><p>在字符模式中，后面的字符可以引用前面的子表达式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">\<span class="token operator">+</span>数字<span class="token comment">//数字指定了子表达式在字符模式中的顺序。如“\1”引用的是第 1 个子表达式，“\2”引用的是第 2 个子表达式。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="禁止引用"><a href="#禁止引用" class="headerlink" title="禁止引用"></a>禁止引用</h5><hr><p>反向引用会占用一定的系统资源，在较长的正则表达式中，反向引用会降低匹配速度。如果分组仅仅是为了方便操作，可以禁止反向引用。</p><p>实现方法如下：在左括号的后面加上一个问号和冒号。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:\w*?)|(?:\d*?)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h5><hr><ul><li><a href="https://www.w3school.com.cn/js/jsref_obj_regexp.asp">JavaScript RegExp 对象</a></li><li><a href="http://c.biancheng.net/view/5632.html">JS正则表达式语法大全</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（十二）</title>
      <link href="2021/01/14/JavaScript/%E6%AD%BB%E7%A3%95JavaScript-12/"/>
      <url>2021/01/14/JavaScript/%E6%AD%BB%E7%A3%95JavaScript-12/</url>
      
        <content type="html"><![CDATA[<h4 id="json"><a href="#json" class="headerlink" title="json"></a>json</h4><hr><p>json是一种传输数据的格式（以对象为样板，本质上就是对象，但用途有区别，对象就是本地用的，json是用来传输的）</p><p>在传输的时候json文件内容都是以字符串的形式传输的，如何将json格式转换为字符串格式呢？有以下方法：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">//str to jsonJSON.parse();//json to strJSON.stringify();//此处JSON都是静态类，类似于MATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异步加载js"><a href="#异步加载js" class="headerlink" title="异步加载js"></a>异步加载js</h4><hr><p>首先我们知道在页面加载的过程中，遇到js代码会阻塞文档的加载，而我们在加载工具方法时没必要阻塞文档，使得js加载会影响页面效率，一旦网速不好，那么整个网站将等待js加载而不进行后续渲染等工作。</p><p>还有的工具方法需要按需加载，用到再加载，不用不加载，此时我们就需要这些js是异步加载的。</p><p>以下是异步加载的三种方案：</p><ul><li><p>defer异步加载：但要等到dom文档全部解析完才会被执行。只兼容IE9以下，也可以将代码写到内部。</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script defer="defer"&gt;此处可写入js代码&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>async异步加载：加载完就执行，async只能加载外部脚本，不能把js写在script标签里。</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script async="async"&gt;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建script节点，插入到DOM中，加载完毕后callBack。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//以下为第三种方法封装的函数</span><span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>script<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span> <span class="token punctuation">{</span>      script<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>script<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token string">"complete"</span> <span class="token operator">||</span> script<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token string">"loaded"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//兼容ie</span>            tools<span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//兼容Safari chrome firefox opera</span>         tools<span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   script<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>   document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appenChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">'demo.js'</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//demo.js</span><span class="token keyword">var</span> tools <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token function-variable function">test</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token function-variable function">demo</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="js加载时间线（记）"><a href="#js加载时间线（记）" class="headerlink" title="js加载时间线（记）"></a>js加载时间线（记）</h4><hr><p>js中什么是时间线？它是根据js开始加载的时候，记录浏览器一切按照顺序做的事情。</p><ol><li>创建Document对象，开始解析web页面，解析HTML元素和他们的文本内容后添加Element对象和Text节点到文档中。这个阶段Document。readyState = “loading”</li><li>遇到link外部css，创建线程加载，并继续解析文档。</li><li>遇到script外部js，并且没有设置async ， defer ，浏览器加载，并阻塞，等待js加载完成并执行该脚本，然后继续解析文档。</li><li>遇到script外部js，并且设置有async，defer 浏览器创建线程加载，并继续解析文档，对于async属性的脚本，脚本加载完成后立即执行（异步禁止使用docuemnt.write（））。</li><li>遇到img标签等，先正常解析dom结构，然后浏览器异步加载src，并继续解析文档。</li><li>当文档解析完成，document.readyState = “interactive”；</li><li>文档解析完成后，所有设置有defer的脚本会按照顺序执行。</li><li>当文档解析完成之后，document对象触发DOMContentLoaded事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。</li><li>当所有saync的脚本加载完成并执行后，img等加载完成后，document.readyState = “complete” window对象触发load事件。</li><li>从此，页面以异步响应方式处理用户输入，网络事件等。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
            <tag> 异步加载 </tag>
            
            <tag> 时间线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（十一）</title>
      <link href="2021/01/14/JavaScript/%E6%AD%BB%E7%A3%95JavaScript-11/"/>
      <url>2021/01/14/JavaScript/%E6%AD%BB%E7%A3%95JavaScript-11/</url>
      
        <content type="html"><![CDATA[<blockquote><p>事件重要吗？它是交互体验的核心功能。</p></blockquote><h4 id="绑定事件处理函数"><a href="#绑定事件处理函数" class="headerlink" title="绑定事件处理函数"></a>绑定事件处理函数</h4><hr><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ele<span class="token punctuation">.</span><span class="token function-variable function">onxxx</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//兼容性很好，但是一个元素的同一个事件上只能绑定一个处理程序</span><span class="token comment">//基本等同于写在HTML行间上</span>obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">,</span> fasle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//type 事件类型，如click，function 处理函数</span><span class="token comment">//IE9以下不兼容，可以为一个事件绑定多个处理程序</span><span class="token function">objattachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//IE独有，一个事件同样可以绑定多个处理程序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件处理程序的运行环境"><a href="#事件处理程序的运行环境" class="headerlink" title="事件处理程序的运行环境"></a>事件处理程序的运行环境</h4><hr><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">ele.onxxx = function (event) {}//程序this指向是dom元素本身obj.addEventListener(type, function, fasle);//程序this指向是dom元素本身obj.attachEvent('on' + type, function);//程序this指向window<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解除事件处理程序"><a href="#解除事件处理程序" class="headerlink" title="解除事件处理程序"></a>解除事件处理程序</h4><hr><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">ele.onclick = false/''/null;ele.removeEventListener(type, function, false);ele.detachEvent('on' + type, function);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>注：若绑定匿名函数，则无法解除</code></p><h4 id="事件处理模型—事件冒泡、捕获"><a href="#事件处理模型—事件冒泡、捕获" class="headerlink" title="事件处理模型—事件冒泡、捕获"></a>事件处理模型—事件冒泡、捕获</h4><hr><h5 id="事件冒泡："><a href="#事件冒泡：" class="headerlink" title="事件冒泡："></a>事件冒泡：</h5><p>结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，即同意事件，子元素冒泡向父元素。（自底向上）</p><h5 id="事件捕获："><a href="#事件捕获：" class="headerlink" title="事件捕获："></a>事件捕获：</h5><p>结构上嵌套关系的元素，会存在事件捕获的功能，即同一时间，自父元素捕获至子元素（事件源元素）。（自顶向下）</p><p>IE没有捕获事件</p><h5 id="触发顺序："><a href="#触发顺序：" class="headerlink" title="触发顺序："></a>触发顺序：</h5><p>先捕获，后冒泡（事件执行顺序按事件绑定的顺序）</p><p><code>注：focus、blur、change、submit、reset、select等事件不冒泡。</code></p><h4 id="取消冒泡和阻止默认事件"><a href="#取消冒泡和阻止默认事件" class="headerlink" title="取消冒泡和阻止默认事件"></a>取消冒泡和阻止默认事件</h4><hr><h5 id="取消冒泡"><a href="#取消冒泡" class="headerlink" title="取消冒泡"></a>取消冒泡</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//W3C标准，但不支持IE9以下版本</span>event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//IE独有，现在谷歌也能实现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="阻止默认事件："><a href="#阻止默认事件：" class="headerlink" title="阻止默认事件："></a>阻止默认事件：</h5><p>默认事件有：标版提交，a标签跳转，右键菜单等</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//以对象属性的方式注册的事件才生效</span>event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//W3C标准，IE9以下不兼容</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//兼容IE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><hr><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">event <span class="token operator">||</span> window<span class="token punctuation">.</span>event <span class="token comment">//用于IE</span><span class="token comment">//事件源对象（以下两种IE都有）：</span>event<span class="token punctuation">.</span>target<span class="token comment">//火狐只有这个</span>event<span class="token punctuation">.</span>srcElement<span class="token comment">//IE只有这个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><hr><ul><li>利用事件冒泡，和事件元对象进行处理。</li><li>优点：<ul><li>性能，不需要循环所有的元素一个个绑定事件</li><li>灵活，当有新的子元素时不需要重新绑定事件</li></ul></li></ul><h4 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h4><hr><blockquote><p>更多事件请参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events">MSN|事件参考</a></p></blockquote><h5 id="鼠标事件："><a href="#鼠标事件：" class="headerlink" title="鼠标事件："></a>鼠标事件：</h5><ul><li>click 点击事件，一次click包含一次mousedown和一次mouseup</li><li>mousedown 鼠标按下事件</li><li>mousemove 鼠标移动事件</li><li>mouseup 鼠标抬起事件</li><li>mouseover 鼠标进入事件</li><li>mouseout 鼠标离开事件</li><li>mouseenter 鼠标进入事件（h5）</li><li>mouseleave 鼠标离开事件（h5）</li><li>用e.button来区分鼠标的按键：0左键 1滑轮 2右键</li><li>DOM3标准规定：click事件只能监听左键，只能通过mousedown和mouseup来判断鼠标键</li></ul><h5 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h5><ul><li>keydown 按下任意按键</li><li>keyup 释放任意按键</li><li>keypress 除 Shift、Fn、CapsLock 外的任意键被按住。（连续触发。）</li><li>keydown和keypress的区别：<ul><li>keydown可以响应任意按键，keypress只可以响应字符类键盘按键</li><li>keypress返回ASCII码，可以转换成响应字符</li><li>根本区别：系统由KeyDown返回键盘bai的代码, 然后由TranslateMessage函数翻译成成字符, 由KeyPress返回字符值. 因此在KeyDown中返回的是键盘的代码, 而KeyPress返回的是ASCII字符. 所以根据你的目的, 如果只想读取字符, 用KeyPress, 如果想读各键的状态, 用KeyDown。</li><li>说KeyDown是按下, KeyPress是按下并松开, 是不对的. 如果你一直按着键呢? 这时不断地产生KeyDown和KeyPress</li></ul></li></ul><h5 id="文本操作事件："><a href="#文本操作事件：" class="headerlink" title="文本操作事件："></a>文本操作事件：</h5><ul><li>input 当一个 <input>, <select>, 或 </select><textarea> 元素的 value 被修改时，会触发 input 事件&lt;/li&gt;&lt;li&gt;focus 当一个元素获取到焦点时&lt;/li&gt;&lt;li&gt;blur 当一个元素失去焦点时&lt;/li&gt;&lt;li&gt;change 当用户更改&lt;input&gt;、&lt;select&gt;和&lt;textarea&gt; 元素的值并提交这个更改时，change 事件在这些元素上触发。和 input 事件不一样，change 事件并不是每次元素的 value 改变时都会触发&lt;/li&gt;&lt;/ul&gt;&lt;h5 id="窗体操作类（window上的事件）"&gt;&lt;a href="#窗体操作类（window上的事件）" class="headerlink" title="窗体操作类（window上的事件）"&gt;&lt;/a&gt;窗体操作类（window上的事件）&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;scroll 当文档视图或元素已滚动时，将触发该事件&lt;/li&gt;&lt;li&gt;load 当整个页面及所有依赖资源如样式表和图片都已完成加载时，将触发load事件&lt;/li&gt;&lt;/ul&gt;</textarea></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（十）</title>
      <link href="2021/01/11/JavaScript/%E6%AD%BB%E7%A3%95JavaScript-10/"/>
      <url>2021/01/11/JavaScript/%E6%AD%BB%E7%A3%95JavaScript-10/</url>
      
        <content type="html"><![CDATA[<h4 id="获取窗口属性、DOM尺寸"><a href="#获取窗口属性、DOM尺寸" class="headerlink" title="获取窗口属性、DOM尺寸"></a>获取窗口属性、DOM尺寸</h4><hr><h5 id="查看滚动条的滚动距离："><a href="#查看滚动条的滚动距离：" class="headerlink" title="查看滚动条的滚动距离："></a>查看滚动条的滚动距离：</h5><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">window.pageXOffset/pageYOffset//IE8及以下不兼容//IE8及以下的浏览器,以下两种方法是冲突的，若前者右值，后者值一定为0，反之一样，所以i用时一般取两个值相加document.body.scrollLeft/Topdocument.documentElement.scrollLeft/Top<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查看可视区窗口尺寸："><a href="#查看可视区窗口尺寸：" class="headerlink" title="查看可视区窗口尺寸："></a>查看可视区窗口尺寸：</h5><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">window.innerWidth/innerHeight //IE8及以下不兼容document.documentElement.clientWidth/clientHight //所有浏览器都兼容document.body.clientWidth/clientHeight //适用于怪异模式下的浏览器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="查看元素的几何尺寸："><a href="#查看元素的几何尺寸：" class="headerlink" title="查看元素的几何尺寸："></a>查看元素的几何尺寸：</h5><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">domEle.getBoundingClientRect()//兼容性很好//该方法返回一个对象，对象里面有left，top，right，bottom等属性。left和top代表该元素左上角的X和Y坐标，right和bottom代表元素右下角的X和Y坐标//height和width属性老版本IE并未实现//返回的结果并不是实时的//下面两种方法也是查看元素视觉上的尺寸，可以取代上面的方法dom.offsetWidthdon.offsetHeight<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查看元素的位置："><a href="#查看元素的位置：" class="headerlink" title="查看元素的位置："></a>查看元素的位置：</h5><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">//对于无定位父级元素，返回相对文档的坐标。对于有定位父级的元素，返回相对于最近的有定位的父级的坐标。不管自身是否是定位元素dom.offsetLeftdom.offsetTop//返回最近的有定位的父级，如无，返回body，body.offsetParent返回nulldom.offsetParent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="让滚动条滚动："><a href="#让滚动条滚动：" class="headerlink" title="让滚动条滚动："></a>让滚动条滚动：</h5><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">//传入x，y坐标，让滚动滚轮滚动到当前位置window.scroll(x, y)window.scrollto(x, y)//scrollBy()会在之前的数据基础之上做累加window.scrollBy(x, y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="脚本化CSS"><a href="#脚本化CSS" class="headerlink" title="脚本化CSS"></a>脚本化CSS</h4><hr><h5 id="读写元素CSS属性："><a href="#读写元素CSS属性：" class="headerlink" title="读写元素CSS属性："></a>读写元素CSS属性：</h5><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">//可读写行间样式，没有兼容性问题，碰到float这样的保留字属性，前面应加css，碰到有-的属性改用驼峰式，写入的值必须是字符串格式dom.style.prop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="查询计算样式："><a href="#查询计算样式：" class="headerlink" title="查询计算样式："></a>查询计算样式：</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//返回的计算样式都是绝对值，没有相对单位</span><span class="token comment">//计算样式只读</span><span class="token comment">//IE8及以下不兼容</span><span class="token comment">//null这个位置可以放伪元素</span>window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token comment">//返回的计算样式的值不是经过转换的绝对值</span><span class="token comment">//IE独有的属性</span>ele<span class="token punctuation">.</span>currenStyle<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（九）</title>
      <link href="2021/01/09/JavaScript/%E6%AD%BB%E7%A3%95JavaScript-9/"/>
      <url>2021/01/09/JavaScript/%E6%AD%BB%E7%A3%95JavaScript-9/</url>
      
        <content type="html"><![CDATA[<h4 id="date对象"><a href="#date对象" class="headerlink" title="date对象"></a>date对象</h4><hr><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">//创建对象的方法var date = new Date();//对象的一些常用方法,更多方法点击此处跳转Date();//——返回当前的日期时间getDate();//——从Date对象返回今天是哪一天(1~31)getTime();//——返回1970年1月1日至今的毫秒数setDate();//——设置Date对象中月的某一天(1~31)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多方法<a href="https://www.w3school.com.cn/js/jsref_obj_date.asp">点击此处</a>跳转</p><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><hr><h5 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval():"></a>setInterval():</h5><p>语法：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">setInterval(code,millisec,lang);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>code</td><td>必需。要调用的函数或要执行的代码串。</td></tr><tr><td>millisec</td><td>必须。周期性执行或调用 code 之间的时间间隔，以毫秒计。</td></tr><tr><td>lang</td><td>可选。 JScript | VBScript | JavaScript</td></tr></tbody></table><h5 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout():"></a>setTimeout():</h5><p>语法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>millisec<span class="token punctuation">,</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>code</td><td>必需。要调用的函数或要执行的代码串。</td></tr><tr><td>millisec</td><td>必需。在执行代码前需等待的毫秒数。</td></tr><tr><td>lang</td><td>可选。脚本语言可以是：JScript | VBScript | JavaScript</td></tr></tbody></table><h5 id="clearInerval-clearTimeout"><a href="#clearInerval-clearTimeout" class="headerlink" title="clearInerval()/clearTimeout():"></a>clearInerval()/clearTimeout():</h5><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">//上述两种定时器每一个定时器都能返回一个唯一标识var timer = setInterval(function(){},1000);var timer1 = setTimeout(function(){},1000);var timer2 = setTimeout(function(){},1000);console.log(timer,timer1,timer2);//1,1,2clearInerval(timer);//即可停止该定时器clearTimeout(timer1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：以上全是window上的方法，内部函数this指向window</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> date对象 </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（八）</title>
      <link href="2021/01/08/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(8)/"/>
      <url>2021/01/08/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(8)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>DOM→Document Object Model</p><p>DOM定义了表示和修改文档所需的方法。DOM对线即为宿主对象，由浏览器厂商定义，用来操作html和xml功能的一类对象的集合。也有人程DOM是对HTML以及XML的标准编程接口。</p><p>DOM、BOM一切系统生成成组的方式基本都是类数组。</p></blockquote><h4 id="DOM基本操作"><a href="#DOM基本操作" class="headerlink" title="DOM基本操作"></a>DOM基本操作</h4><hr><ul><li>对节点的增删改查<ul><li>节点的类型：<ul><li>元素节点——1</li><li>属性节点——2</li><li>文本节点——3</li><li>注释节点——8</li><li>document——9</li><li>DocumentFragment——11</li></ul></li><li>查看元素节点<ul><li>document代表整个文档</li><li>document.getElementByID(‘’)——获取带有指定 id 的节点（元素）</li><li>getElementsByTagName(‘’)[i]——返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）</li><li>getElementsByClassName()——返回包含带有指定类名的所有元素的节点列表。</li><li>document.getElementsByName()——返回带有指定名称的对象集合</li><li>document.querySelector()——返回文档中匹配指定的CSS选择器的第一元素，不是实时的，返回的一个新的副本(不常用)</li><li>document.querySelectorAll()——document.querySelectorAll() 是 HTML5中引入的新方法，返回文档中匹配的CSS选择器的所有元素节点列表，不是实时的，返回的一个新的副本(不常用)</li></ul></li><li>遍历节点树：<ul><li>parentNode：父节点</li><li>childNodes：子节点们</li><li>firstChild：第一个子节点</li><li>lastChild：最后一个子节点</li><li>nextSibling：后一个兄弟节点</li><li>previousSibling：前一个兄弟节点</li></ul></li><li>基于<strong>元素节点树</strong>的遍历：（除了children其他的都不兼容ie9以下）<ul><li>parentElement：返回当前元素的父元素节点（IE不兼容）</li><li>children：返回当前元素的元素子节点</li><li>node.childElementCount = node.children.length：当前元素节点的子元素的个数</li><li>firstElementChild：返回的是第一个元素节点</li><li>lastElementChild：返回的是最后一个元素节点</li><li>nextElementSibling：返回后一个兄弟元素</li><li>previousElementSibling：返回前一个兄弟元素</li></ul></li><li>节点的四个属性：<ul><li>nodeName：元素的标签名，以大写形式表示，只读</li><li>nodeValue：Text节点或Comment节点的文本内容，可读写</li><li>nodeType：该节点的类型，返回的值为<a href="">节点类型</a>后面的数字。只读</li><li>attributes：Element节点的树形集合</li></ul></li><li>节点的一个方法：<ul><li>Node.hasChildNodes()：返回true或者false，看节点有没有子节点</li></ul></li><li>增加节点：<ul><li>document.createElement(‘’)：创建一个元素节点并返回（常用）</li><li>document.createTextNode()：创建文本节点</li><li>document.createComment(‘’)：创建注释节点</li><li>document.createDocumentFragment()：</li></ul></li><li>插入节点（常用）：<ul><li>PARENTNODE.appendChild()：在PARENTNODE后面插入括号里的节点，类似push</li><li>PARENTNODE.insertBefore(a, b)：在PARENTNODE和b之间插入a</li></ul></li><li>删除节点：<ul><li>parent.removeChild()：父级调用该方法删除括号里的子节点，并返回剪切的节点</li><li>child.remove()：节点自己调用该方法自行销毁，不返回（常用）</li></ul></li><li>替换节点：<ul><li>parent.replaceChild(new, origin)：用新的元素替换旧的元素</li></ul></li></ul></li></ul><ul><li>Element节点的一些<strong>属性</strong>：<ul><li>innerHTML：可设置或返回表格行的开始和结束标签之间的HTML，可取可赋值</li><li>innerText（火狐不兼容）/textContent（老版本IE不兼容）：设置标签中的文本内容，若在设置该节点的文本内容时，有子节点，文本内容会将子节点覆盖掉</li></ul></li><li>Element节点的一些<strong>方法</strong>：<ul><li>ele.setAttribute(‘属性名’，‘属性值’)：给节点设置属性</li><li>ele.getAttribute(‘属性名’)：返回节点属性值</li><li>若要给节点的id以及class该值可直接用ele.id和ele.className进行修改</li></ul></li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（七）</title>
      <link href="2021/01/07/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(7)/"/>
      <url>2021/01/07/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(7)/</url>
      
        <content type="html"><![CDATA[<h4 id="try…catch…finally"><a href="#try…catch…finally" class="headerlink" title="try…catch…finally"></a>try…catch…finally</h4><hr><ul><li><p>在try里面发生的错误，不会执行错误后的try里面的代码。</p></li><li><p>在try里面发生的错误，try后面的代码依旧可以执行。</p></li><li><p>catch语句允许我们定义当try代码快发生错误时，所执行的代码块。</p></li><li><p>finally语句在try和catch之后无论有无异常都会执行。</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尝试执行的代码块</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//捕捉错误的代码块</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//五路吗try、catch结果如何都会执行的代码块</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h4><hr><p>Error.name 的六种值对应的信息：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">EvalError//eval()的使用与定义不一致RangeError//数值越界ReferenceError//非法或不能识别的引用值SyntaxError//发生语法解析错误TypeError//操作数类型错误URIError//URI处理函数使用不当<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ECMAScript5严格模式"><a href="#ECMAScript5严格模式" class="headerlink" title="ECMAScript5严格模式"></a>ECMAScript5严格模式</h4><hr><ul><li>启动：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment">//写在逻辑的最顶端</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不再兼容es3的一些不规则语法，使用es5的规范</li><li>两种用法：<ul><li>全局严格模式</li><li>局部函数内的严格模式（推荐）</li></ul></li><li>不支持with(不用他应为它修改了作用域链，使程序执行效率极大的降低)，arguments.callee，func.caller，变量赋值前必须声明，局部this必须被赋值（Person.call（null/undefined）赋值什么this就是什么），拒绝重复属性和参数。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//with()会把括号里的对象当作with所圈定的代码快的作用域链的最顶端</span><span class="token keyword">var</span> mes <span class="token operator">=</span> <span class="token punctuation">{</span>   nema <span class="token operator">=</span> <span class="token string">"obj"</span><span class="token punctuation">}</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"window"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"scope"</span><span class="token punctuation">;</span>   <span class="token keyword">with</span><span class="token punctuation">(</span>mes<span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> try,catch,finally </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（六）</title>
      <link href="2021/01/06/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(6)/"/>
      <url>2021/01/06/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(6)/</url>
      
        <content type="html"><![CDATA[<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><hr><h5 id="定义数组的方法："><a href="#定义数组的方法：" class="headerlink" title="定义数组的方法："></a>定义数组的方法：</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//数组字面量</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用构造的方法</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//括号里面加一个值代表数组的长度，如果是浮点型的值会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="数组的读和写"><a href="#数组的读和写" class="headerlink" title="数组的读和写"></a>数组的读和写</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//如果溢出读的话结果为undefined</span>arr<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> xxx<span class="token punctuation">;</span><span class="token comment">//可以溢出写，没有的位为undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="数组的几个方法-ES3-0"><a href="#数组的几个方法-ES3-0" class="headerlink" title="数组的几个方法(ES3.0)"></a>数组的几个方法(ES3.0)</h5><h6 id="改变原数组"><a href="#改变原数组" class="headerlink" title="改变原数组"></a>改变原数组</h6><p>push方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在数组的最后一位添加数据</span><span class="token comment">//自己实现push</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pop方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//剪切数组的最后一位，会忽略添加的参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>shift/unshift方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在数组的第一位添加数据，可以添加多位</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在数组的第一位剪切数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>reverse方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把原数组逆转顺序</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>splice方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//arr.splice(从第几位开始，截取多少的长度，在切口出添加新的数据)，返回截取的结果，splice(-1, 2, 3),-1代表的是倒数第一位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>sort方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将数组按字符串的ASCII码升序排列</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[-1, 1, 10, 5]</span><span class="token comment">//由此看这并不是我们想要的排序，因此系统也提供了给我们参数规则：</span><span class="token comment">//1、必须写两形参</span><span class="token comment">//2、看返回值1）当返回值为负数时，那么前面的数放在前面</span><span class="token comment">//   2）为正数，那么后面的数在前面</span><span class="token comment">// 3）为0，不动</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token comment">//升序排列</span>   <span class="token comment">//return b - a;降序排列</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="不改变原数组"><a href="#不改变原数组" class="headerlink" title="不改变原数组"></a>不改变原数组</h6><ul><li>arr.concat(arr1)：会将arr1衔接到arr后面，返回一个新的数组，arr和arr1都不改变。</li><li>Array.toString()：将数组按字符串返回</li><li>Array.slice(i, j)：从第i位开始截取，截取到第j位，j不写就截取到末尾</li><li>Array.join()：在数组每两位之间插入括号里的值，返回字符串形式</li><li>String.split(i, j)：将字符串从i的地方分割，j可指定返回的数组的最大长度。如果不设置，整个字符串都会被分割，不考虑它的长度。如果括号里不写，就会将字符串每一位字符都分割。用法和Array.join()相反</li></ul><h4 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h4><hr><ul><li>定义：<ul><li>属性要为索引（数字）属性</li><li>必须有length属性</li><li>最好加上push</li></ul></li><li>可以利用属性名模拟数组的特性</li><li>可以动态的增长length属性</li><li>如果强行让类数组调用push方法，则会根据length属性值的位置进行属性的扩充</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">"2"</span> <span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>   <span class="token string">"3"</span> <span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>   length <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>   push <span class="token operator">:</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//问：obj的索引属性怎么变？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组相关的应用"><a href="#数组相关的应用" class="headerlink" title="数组相关的应用"></a>数组相关的应用</h4><hr><p>数组去重</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//哈希</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">unique</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>temp<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         temp<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>         arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 类数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（五）</title>
      <link href="2021/01/05/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(5)/"/>
      <url>2021/01/05/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(5)/</url>
      
        <content type="html"><![CDATA[<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><hr><ul><li><p>预编译过程中this指向window</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在全局作用域里this指向window</p></li><li><p>call/apply可以改变this的指向(见<a href="call/apply%E9%83%A8%E5%88%86">call/apply部分</a>)</p></li><li><p>obj.func()：func()里面的this指向obj</p></li><li><p>在自执行函数里面this指向window</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//关于this的经典例题</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"222"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>   name <span class="token operator">:</span> <span class="token string">"111"</span><span class="token punctuation">,</span>   <span class="token function-variable function">say</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> fun <span class="token operator">=</span> a<span class="token punctuation">.</span>say<span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 222</span>a<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>   name <span class="token operator">:</span> <span class="token string">"333"</span><span class="token punctuation">,</span>   <span class="token function-variable function">say</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fun</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里的fun()没有被调用，自执行，走预编译环节，里面的this指向window</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>b<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//222</span>b<span class="token punctuation">.</span>say <span class="token operator">=</span> a<span class="token punctuation">.</span>say<span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//333</span><span class="token comment">//例题二</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> a<span class="token punctuation">;</span>   <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0 5 0</span><span class="token keyword">new</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0 undefined 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h4><hr><ul><li><p>arguments.callee:指向自身函数的引用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> n <span class="token operator">*</span> arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如上第五行立即执行函数没有函数名，则可以利用arguments.calle调用函数的引用。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>caller:是函数自己的属性，返回调用fun的函数对象，即fun的执行环境，如果fun的执行环境为window则返回null。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>caller<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回的是function test(){...}</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span>caller<span class="token punctuation">)</span><span class="token comment">//这里必须写在fun里面，因为caller只有函数执行过程中才有效</span><span class="token punctuation">}</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为:null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this </tag>
            
            <tag> arguments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（四）</title>
      <link href="2021/01/04/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(4)/"/>
      <url>2021/01/04/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(4)/</url>
      
        <content type="html"><![CDATA[<h4 id="继承模式"><a href="#继承模式" class="headerlink" title="继承模式"></a>继承模式</h4><hr><ul><li><strong>原型链继承：</strong><ul><li>过多的继承了没用的属性</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">parentInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> parentInstance<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>借用构造函数实现继承：</strong><ul><li>不能继承借用构造函数的原型</li><li>每次构造函数都要多走一个函数，重复定义</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//该对象的原型还是Son.prototype</span><span class="token function">Father</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>共享原型实现继承：</strong><ul><li>不能随便改动自己的原型</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">"wang"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>圣杯模式：</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> inherit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> <span class="token function-variable function">Mid</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//在函数执行后销毁，为什么return到外面的函数还能用函数里面的变量？</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Target<span class="token punctuation">,</span> Origin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//应为该函数被保存到了外部，形成了闭包，保存了原函数的执行期上下文，里面就包括Mid</span>      <span class="token class-name">Mid</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constuctor <span class="token operator">=</span> Target<span class="token punctuation">;</span>      <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uber <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token comment">//超类</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><hr><ul><li>意义：管理变量，防止污染全局，适用于模块开发</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> nameSpace <span class="token operator">=</span> <span class="token punctuation">{</span>   department1 <span class="token operator">:</span> <span class="token punctuation">{</span>      xiaowang <span class="token operator">:</span> <span class="token punctuation">{</span>         name <span class="token operator">:</span> <span class="token string">"abc"</span><span class="token punctuation">,</span>         age <span class="token operator">:</span> <span class="token string">"18"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      xiaoming <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   department2 <span class="token operator">:</span> <span class="token punctuation">{</span>      zhangsan <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token punctuation">}</span><span class="token punctuation">,</span>      lisi <span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//当我们需要用到变量时</span><span class="token keyword">var</span> ws <span class="token operator">=</span> nameSpace<span class="token punctuation">.</span>department1<span class="token punctuation">.</span>xiaowang<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对象的枚举"><a href="#对象的枚举" class="headerlink" title="对象的枚举"></a>对象的枚举</h4><hr><p>枚举就是遍历，实现对象的遍历。</p><ul><li>for in循环</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>   name <span class="token operator">:</span> <span class="token string">'wang'</span><span class="token punctuation">,</span>   age <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>   son <span class="token operator">:</span> <span class="token punctuation">{</span>name1 <span class="token operator">:</span> <span class="token string">'xiaocheng'</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prop <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// wang  18  xiaocheng,显然，xiaocheng不是该对象本身的属性</span><span class="token punctuation">}</span><span class="token comment">//注意，枚举里面只能用obj[prop]这种形式，obj.prop会把prop当成对象里面的属性来处理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>hasOwnProperty()：判断属性是否是该对象本身的，Boolean。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>   name <span class="token operator">:</span> <span class="token string">'wang'</span><span class="token punctuation">,</span>   age <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>   son <span class="token operator">:</span> <span class="token punctuation">{</span>name1 <span class="token operator">:</span> <span class="token string">'xiaocheng'</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//wang  18</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>in：类似hasOwnProperty()，但是in的作用是判断能不能在这个对象上调用这个属性，不是判断属性属不属于对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>   name <span class="token operator">:</span> <span class="token string">'wang'</span><span class="token punctuation">,</span>   age <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>   son <span class="token operator">:</span> <span class="token punctuation">{</span>name1 <span class="token operator">:</span> <span class="token string">'xiaocheng'</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name1'</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'name1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>A instanceof B:判断A 是不是 B构造函数构造出来的，看A的原型链上有没有B的原型。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aperson <span class="token keyword">instanceof</span>  <span class="token class-name">Person</span><span class="token punctuation">;</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token comment">//以上全部返回true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>判断是对象还是数组：<ul><li>关于toString()的详解:<a href="https://www.cnblogs.com/xiaohuochai/p/5557387.html">点击此处</a></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> ArrayOrObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//假设我们不知道它是数组还是对象</span><span class="token comment">//方法一,用构造器</span>ArrayOrObj<span class="token punctuation">.</span>constructer<span class="token comment">//方法二，用instanceof</span>ArrayOrObj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span><span class="token comment">//方法三，利用call,会根据ArrayOrObj的类型返回值</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ArrayOrObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Array]</span><span class="token comment">//方法四，toString()方法，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 继承模式 </tag>
            
            <tag> 命名空间 </tag>
            
            <tag> 对象的枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（三）</title>
      <link href="2021/01/03/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(3)/"/>
      <url>2021/01/03/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(3)/</url>
      
        <content type="html"><![CDATA[<h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><hr><ul><li>定义：原型是function对象的一个属性，它定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以<strong>继承该原型的属性和方法</strong>。原型也是对象。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//构造函数的特点是命名为大驼峰式,一般用于批量生产对象</span><span class="token keyword">function</span> <span class="token function">DayDayUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//生产对象的方法new</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DayDayUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DayDayUp</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>Lastname <span class="token operator">=</span> wang<span class="token punctuation">;</span> <span class="token comment">//prototype就是原型，一个function对象自带的属性，本身也是对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>Lastname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// wang</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>如何查看原型：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//隐式执行如下步骤，其中__proto__,就是原型</span><span class="token comment">//var this = {__proto__ : Person.prototype}</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Object.create(proto，[propertiesObject]):方法创建一个新对象，使用现有的对象来提供新创建的对象的–proto–。proto：新创建对象的原型对象。propertiesObject：任选。需要放置一个对象，该对象的属性类型参照Object.defineProperties()的第二个参数。如果该参数被指定且不为undefined，该变量对象的自有可枚举属性（即其自身定义的属性，而不是其原型链上的枚举属性）将为新创建的对象添加指定的属性值和对应的属性属性。</p></li></ul><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><hr><ul><li>如下是一个原型链的形式：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Object.prototype是所有对象的最终原型</span><span class="token comment">//Grand.prototype.__proto__ = Object.prototype;</span>Grand<span class="token punctuation">.</span>prototyoe<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">"wang"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Grand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token keyword">var</span> grand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Grand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Father</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> grand<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"yi"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> father<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>hobbit <span class="token operator">=</span> <span class="token string">"lol"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span>hobbit<span class="token punctuation">;</span><span class="token comment">//lol</span>son<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment">//yi</span>son<span class="token punctuation">.</span>lastName<span class="token punctuation">;</span><span class="token comment">//wang</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>原型链上属性的增删改查</p></li><li><p>Object.creat(原型):也是一种对象创建方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token operator">:</span> <span class="token string">"wang"</span><span class="token punctuation">,</span> age <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">creat</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//obj1的原型就是obj</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>绝大多数</strong>对象的最终都会继承自Object.prototype，</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//如下创建的对象不会继承Object.prototype，</span><span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">creat</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h4><hr><ul><li>call/apply可以改变this的指向：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Perosn</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'cheng'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会让Person里面所有的this指向obj</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当a对象完全涵盖b对象的属性，可以用call/apply方法重用</li></ul><p>关于两者的区别：</p><ul><li>call需要把实参按照形参的个数传进去</li><li>apply需要传一个实参列表（arguments）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">wheel</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token punctuation">[</span>wheelSize<span class="token punctuation">,</span> style<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">wheel</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> wheelSize<span class="token punctuation">,</span> style<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型 </tag>
            
            <tag> 原型链 </tag>
            
            <tag> call/apply </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（二）</title>
      <link href="2021/01/02/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(2)/"/>
      <url>2021/01/02/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(2)/</url>
      
        <content type="html"><![CDATA[<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><hr><ul><li>对象的基本形式：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token operator">:</span> <span class="token string">"ws"</span><span class="token punctuation">,</span>   sex <span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">}</span><span class="token comment">//增加对象属性：</span>ws<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">"22"</span><span class="token punctuation">;</span><span class="token comment">//修改属性：</span>ws<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">"23"</span><span class="token punctuation">;</span><span class="token comment">//删除属性：</span><span class="token keyword">delete</span> ws<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对象中的this指的就是对象本身，如上例this.name就相当于ws.name。</li></ul><ul><li><p>对象的创建方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1、plainObject，对象字面量/对象直接量</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//2、构造函数：对象名命名规则为大驼峰式(首字母大写)</span><span class="token comment">//1）系统自带的构造函数：</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ws'</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span><span class="token comment">//2）自定义：</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ws'</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token comment">//加入参数可以产生多个独一无二的对象</span>   <span class="token punctuation">}</span><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>构造函数的基础原理：</p><ul><li>在函数体最前面隐式的加上this = {}</li><li>执行this.xxx = xxx;</li><li>隐式的返回this，return this</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//var this = {}</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token comment">//return this</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'ws'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>属性的表示方法：<ul><li>obj.prop</li><li>obj[“prop”]</li></ul></li></ul><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><hr><ul><li>原始值(Number、Stirng、Boolean、Null、Underfined)不能有属性和方法。</li></ul><ul><li>数字有正常的原始值数字和数字对象，字符串和布尔类型也一致，undefined和null不能设置属性和方法</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//num变成了对象123</span>num<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// abc</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 246,参与运算之后不再是数字对象了，变成原始值数字。</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串型对象</span><span class="token keyword">var</span> bol <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//布尔型的对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>原始值不可能有属性和方法的，之所以能像对象一样能调用是因为隐式执行了一个过程叫<strong>包装类</strong>。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>num<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//计算机隐式执行：new Number(4).len = 3;  然后执行delete</span><span class="token comment">//</span><span class="token comment">//访问时再一次new Number(4).len;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span><span class="token comment">//下面为一个包装类的题：</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>str <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   test<span class="token punctuation">.</span>sign <span class="token operator">=</span> <span class="token string">"typeof的返回结果可能为String"</span>；   <span class="token comment">//隐式执行new String(test).sign = "xxxx";delete;</span><span class="token punctuation">}</span><span class="token comment">//隐式执行new String(test).sign</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象 </tag>
            
            <tag> 包装类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕JavaScript（一）</title>
      <link href="2021/01/01/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(1)/"/>
      <url>2021/01/01/JavaScript/%E6%AD%BB%E7%A3%95JavaScript(1)/</url>
      
        <content type="html"><![CDATA[<h4 id="一、浏览器"><a href="#一、浏览器" class="headerlink" title="一、浏览器"></a>一、浏览器</h4><h5 id="1、浏览器的组成"><a href="#1、浏览器的组成" class="headerlink" title="1、浏览器的组成"></a>1、浏览器的组成</h5><ul><li>shell部分</li><li>内核部分<ul><li>IE——trident</li><li>Chrome——webkit/blink</li><li>Firefox——Gecko</li><li>Opera——Presto</li><li>Safari——Webkit</li></ul></li><li>渲染引擎（语法规则和渲染）</li><li>JS引擎</li><li>其他模块（负责异步等）</li></ul><h4 id="二、JS特性"><a href="#二、JS特性" class="headerlink" title="二、JS特性"></a>二、JS特性</h4><h5 id="1、解释性语言："><a href="#1、解释性语言：" class="headerlink" title="1、解释性语言："></a>1、解释性语言：</h5><ul><li>翻译一行执行一行代码</li></ul><p>tip：</p><ul><li>编译性语言<ul><li>优点：快</li><li>不足：移植性不好（不跨平台）</li></ul></li><li>解释性语言<ul><li>优点：跨平台</li><li>不足：稍微慢</li></ul></li></ul><h5 id="2、js引擎是单线程"><a href="#2、js引擎是单线程" class="headerlink" title="2、js引擎是单线程"></a>2、js引擎是单线程</h5><h5 id="3、js执行队列"><a href="#3、js执行队列" class="headerlink" title="3、js执行队列"></a>3、js执行队列</h5><ul><li>轮转时间片</li></ul><h4 id="三、JS基本语法"><a href="#三、JS基本语法" class="headerlink" title="三、JS基本语法"></a>三、JS基本语法</h4><h5 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h5><ul><li>变量声明：var</li><li>命名规则：<ol><li>变量名必须以英文字母、下划线、$开头</li><li>变量名可以包括英文字母、下划线、$、数字</li><li>不可以用系统的关键字、保留字作为变量名</li></ol></li></ul><h5 id="2、值类型"><a href="#2、值类型" class="headerlink" title="2、值类型"></a>2、值类型</h5><ul><li><p>原始值——存在栈stack里面</p><p>Number：数字</p><p>Boolean：布尔类型，表示逻辑，ture/false</p><p>String：字符串</p><p>undefined：没有定义的值</p><p>null：空，占一个位置</p></li><li><p>引用值——存在堆heap里面</p><p>array、object、function、date、RegExp….</p></li></ul><h5 id="3、js语句基本规则"><a href="#3、js语句基本规则" class="headerlink" title="3、js语句基本规则"></a>3、js语句基本规则</h5><ul><li>js语法错误会引发后续代码终止，但不会影响其他js代码块</li><li>格式规范：语句后面加分号，=、+、-两边都应该有空格</li></ul><h5 id="4、运算操作符"><a href="#4、运算操作符" class="headerlink" title="4、运算操作符"></a>4、运算操作符</h5><ul><li><p>赋值的顺序，自右向左；计算的顺序，自左向右</p></li><li><p>“+”：</p><ul><li>数学运算、字符串相加就是字符串连接</li><li>任何数据类型加字符串都等于字符串</li></ul></li><li><p>“%”：取余数</p></li><li><p>“++”:a=a+1就是a++。a++先执行表达式再自增，执行表达式时使用的是a的原值；++a先自增再执行表达式，执行表达式时使用的是自增后的a</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>a <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>document<span class="token punctuation">.</span><span class="token function">warite</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>“+=”:a+=10即是a=a+10</p></li><li><p>“,”：逗号操作运算符，先看逗号前面的表达式并计算，然后看逗号后面的表达式并计算，然后返回后面表达式的结果。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="5、比较运算符"><a href="#5、比较运算符" class="headerlink" title="5、比较运算符"></a>5、比较运算符</h5><ul><li><p>```javascript<br>var a = ‘10’ &gt; ‘8’;//只比较第一个字符<br>document.write(a);  //false</p><pre class="line-numbers language-none"><code class="language-none">- ```javascript  var a = Infinity == Infinity;  document.write(a);  //true    var a = NaN == NaN;  document.write(a);  //false   特例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>&amp;&amp;（与）：最后会返回一个运算结果。先看第一个表达式转换为第一个布尔值的结果，如果布尔值为真，那么它会看第二个表达式转换为布尔值的结果，如此往后直到布尔值为假时返回该值；如果只有两个表达式的话，只看第二个表达式，就可以返回该表达式的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//undefined,null,NaN,"",0,false 转换为布尔值为faslse</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>a || b（或）：碰到真就返回真的值。</p></li><li><p>！（非）：布尔值取反</p></li></ul><h5 id="6、条件语句"><a href="#6、条件语句" class="headerlink" title="6、条件语句"></a>6、条件语句</h5><ul><li>```javascript<br>if(1 &gt; 2){<br>   ……<br>}<br>可以转换为<br>1 &gt; 2 &amp;&amp; ……<pre class="line-numbers language-none"><code class="language-none">- ```  for(var i = 1; i &lt; 10; i ++){  ......;  }    可理解为：  var i = 1；  for（ ; i &lt; 10; ）{  ......;  i ++;  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>switch(条件) case(判断) break(终止循环)</li></ul><h5 id="7、typeof"><a href="#7、typeof" class="headerlink" title="7、typeof()"></a>7、typeof()</h5><ul><li><p>typeof操作符将返回数据类型（number、boolean、string、number、object、function、symbol）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">typrof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefind </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//string,即返回的undefined为字符串类型。</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">    ##### 8、显式类型转换- Number():返回number类型的值。undefined返回NaN,null返回0。- parseInt():返回整数，小数直接去掉；所有非数字类型都将返回NaN。parseInt(num,n)中n代表num的进制，然后将该数转换为10进制，n的取值为2-36。  ```javascript  var a = 101010;  var b = parseInt(a,2);  console.log(b);//42     var demo = "123abc";  var num = parseInt(demo);  console.log(typeof(num) + ":" + num); //number : 123    从左到右以数字为开始一直到非数字位结束，把数字位返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>String():转换为字符串</p></li><li><p>toString():用法为要转换的数据.toString()，unfefind、null不能使用该操作。也可用作进制转换：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="9、隐式类型转换"><a href="#9、隐式类型转换" class="headerlink" title="9、隐式类型转换"></a>9、隐式类型转换</h5></li><li><p>isNaN():会将括号里面的先放到Number()返回值，再判断它是否是NaN，返回true或者false</p></li><li><p>++/– –、+/-(一元正负，如+a，-a)  ：a++，先将a放入Number()执行再加减。</p></li><li><p>加：会调用toString();</p></li><li><p>减乘除：调用Number();</p></li><li><p>&amp;&amp; || !:调用Boolean()进行类型转换；</p></li><li><p>&lt; &gt; &lt;= &gt;=：如字符串和数字比较会把字符串转换成数字类型；</p></li><li><p>== !=：如1 ==  “1” == true，返回的值为布尔类型。</p></li></ul><h5 id="10、不发生类型转换"><a href="#10、不发生类型转换" class="headerlink" title="10、不发生类型转换"></a>10、不发生类型转换</h5><ul><li>===：绝对等于</li><li>!==：绝对不等于</li></ul><h5 id="11、三目运算符"><a href="#11、三目运算符" class="headerlink" title="11、三目运算符"></a>11、三目运算符</h5><ul><li>基本形式：条件判断？是：否，并且返回值。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token string">"10"</span> <span class="token operator">&gt;</span> <span class="token string">"9"</span> <span class="token operator">?</span> <span class="token number">222</span> <span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="12、js语句与js表达式"><a href="#12、js语句与js表达式" class="headerlink" title="12、js语句与js表达式"></a>12、js语句与js表达式</h5><ol><li>表达式：表达式能够返回一个值<ol><li>a</li><li>a+b</li><li>demo(1)</li><li>arr.map()</li><li>function test () {}</li></ol></li><li>语句：<ol><li>if(){}</li><li>for(){}</li><li>switch(){case:xxxx}</li></ol></li></ol><h4 id="四、初识引用值"><a href="#四、初识引用值" class="headerlink" title="四、初识引用值"></a>四、初识引用值</h4><h5 id="1、数组"><a href="#1、数组" class="headerlink" title="1、数组"></a>1、数组</h5><h5 id="2、对象"><a href="#2、对象" class="headerlink" title="2、对象"></a>2、对象</h5><h4 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h4><h5 id="1、函数声明"><a href="#1、函数声明" class="headerlink" title="1、函数声明"></a>1、函数声明</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">theFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token comment">//命名函数表达式，会忽略函数名，执行abc()会报错</span><span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token comment">//匿名函数表达式——比较常用，一般叫做函数表达式</span><span class="token keyword">var</span> <span class="token function-variable function">demo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、组成形式"><a href="#2、组成形式" class="headerlink" title="2、组成形式"></a>2、组成形式</h5><ul><li>形参与实参</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//其中ab叫做形式参数——形参</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//括号中表示var a，b</span><span class="token keyword">var</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//其中1234叫做实际参数——实参</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//3,js允许实参和实参数目不等，舍弃多余的继续运行</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计算机会将实参存到argument这个数组中，如打印结果为[1, 2, 3]称为实参列表</span>   <span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5,此时a与argument[0]相互映射，argument[0]的值会随着a的值而改变</span>   b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined，此时b与argument[1]不存在映射关系，即argument[0]的值不会因为b的值改变而改变</span><span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>终止函数与返回值</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、<span class="token keyword">return</span>作为终止函数<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//a,return后面的语句不执行</span><span class="token number">2</span>、返回值：把一个值返回到函数外部<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、作用域"><a href="#3、作用域" class="headerlink" title="3、作用域"></a>3、作用域</h5><ul><li><p>**[[scope]]:**每个JavaScript函数都是一个对象，对象中有些属性我们可以访问，但有些不可以，这些属性进攻JavaScript引擎存取，[[scope]]就是其中一个，[[scope]]指的就是作用域，其中存储了运行期上下文的集合。</p></li><li><p><strong>作用域链：</strong>[[scope]]中锁储存的执行期上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">234</span>   <span class="token punctuation">}</span>   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>   <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> glob <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当函数a被定义时，在作用域链中a.[[scope]]里第0为为GO{}</span><span class="token comment">//当函数a被执行时，a.[[scope]]里第零位变为AO{},第一位变为GO{}，如下图：scope chain即是作用域链</span><span class="token comment">//当函数b被定义时，b的[[scope]]里面存的是a的作用域链(图3)，b产生的AO{}和a产生的AO{}是相同的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="E:\一点笔记\JavaScript\pic\作用域1.png" alt="作用域1"></p><p><img src="E:\一点笔记\JavaScript\pic\作用域2.png" alt="作用域2"></p><p><img src="E:\一点笔记\JavaScript\pic\作用域3.png" alt="作用域3"></p><p><img src="E:\一点笔记\JavaScript\pic\作用域4.png" alt="作用域4"></p></li><li><p><strong>运行期上下文：</strong>当函数正要执行前一刻时，会创建一个称为<strong>执行期上下文</strong>的内部对象。一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文，当函数执行完毕，它锁产生的执行上下文被销毁。</p></li><li><p><strong>查找变量：</strong>从作用域链的顶端依次向下查找。</p></li></ul><h5 id="4、递归"><a href="#4、递归" class="headerlink" title="4、递归"></a>4、递归</h5><ul><li><p>找规律</p></li><li><p>找出口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">mul</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//阶乘 n * mul(n-1)</span><span class="token keyword">function</span> <span class="token function">fb</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fb</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//斐波那契数列 fb(n) == fb(n-1) + fb(n-2)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>递归能使代码变得更加简洁，但时间复杂度高。</p><h4 id="六、预编译"><a href="#六、预编译" class="headerlink" title="六、预编译"></a>六、预编译</h4><h5 id="1、JS执行三部曲"><a href="#1、JS执行三部曲" class="headerlink" title="1、JS执行三部曲"></a>1、JS执行三部曲</h5><ul><li><p>语法分析：将所有代码扫描一遍看是否存在语法错误</p></li><li><p>预编译：发生在函数执行的前一刻。</p><ul><li><strong>函数体系里的预编译</strong>：</li></ul><ol><li>创建AO对象（activation object），执行期上下文；</li><li>找形参和变量声明，将变量和形参名作为AO属性名，值为undefined；</li><li>将实参和形参值相统一；</li><li>在函数里面找函数声明，值赋予函数体（覆盖前面的值）；</li></ol><ul><li><p><strong>全局里的预编译：</strong></p><ul><li>对应上面的少了第三步，第一步变为生成GO对象（global object）。</li></ul></li><li><p>imply global 暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量就为全局对象（window）所有。</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>——<span class="token operator">&gt;</span> window<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//b为暗示全局变量</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined,a是局部变量</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123，b是未经声明就赋值的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一切声明的全局变量，全是window的属性。window就是全局的域。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> ——<span class="token operator">&gt;</span> window<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解释执行</p></li></ul><h4 id="七、闭包"><a href="#七、闭包" class="headerlink" title="七、闭包"></a>七、闭包</h4><hr><ul><li><p>当内部函数被保存到外部时，将会生成闭包。如下面的代码会产生闭包，return b将b的引用存到了全局里面，执行后函数a的AO会被销毁，但b的作用域链存着a的AO和GO。</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">ex1:function a() {function b() {var bbb = 234;document.write(aaa);}var aaa = 123;return b;}var demo = a();demo(); // 123ex2:function a() {      var num = 100;  function b() {      num ++;      console.log(num);   }   return b;}var demo = a();demo();               //101demo();               //102ex3:function test() {   var num = 100;   function a() {      num ++ ;      console.log(num);   }   function b() {num -- ;      console.log(num);   }   return [a,b]}var myArr = test();myArr[0]();//101myArr[1]();//100,函数a和函数b用的时同一个AO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>闭包的危害：当内部函数被保存到外部时，将会生成闭包。闭包会导致原有作用域链不释放，造成<strong>内存泄漏</strong>。（占内存越多，可用内存就越少）</li></ul><ul><li><p>闭包的作用：</p><ul><li><p>实现共有变量</p><ul><li>eg：函数累加器，ex1</li></ul></li><li><p>可以做缓存（储存结构）</p><ul><li>eg：ex3</li></ul></li><li><p>可以实现封装，属性私有化。</p><ul><li><p>eg：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//如下形成的闭包，Mid变成了该函数的私有化变量。</span><span class="token keyword">var</span> inherit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> <span class="token function-variable function">Mid</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//在函数执行后销毁，为什么return到外面的函数还能用函数里面的变量？</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Target<span class="token punctuation">,</span> Origin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//应为该函数被保存到了外部，形成了闭包，保存了原函数的执行期上下文，里面就包括Mid</span>      <span class="token class-name">Mid</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constuctor <span class="token operator">=</span> Target<span class="token punctuation">;</span>      <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uber <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>模块化开发，防止污染全局变量。</p></li></ul></li></ul><ul><li><p>立即执行函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//立即执行函数</span><span class="token comment">//针对初始化功能的函数</span><span class="token comment">//(function (){}()); W3C 建议使用这种形式</span><span class="token comment">//(function (){})();</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>   <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//只有表达式才能被执行符号执行(执行符号就是（）)</span><span class="token comment">//能被执行符号执行的表达式，函数名字会被忽略 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="2021/01/01/Hexo/Hello-Hexo/"/>
      <url>2021/01/01/Hexo/Hello-Hexo/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><hr><p>历时两天不负己望终于完成了Hexo博客的基本部署。曾在2019年基于WorldPress博客引擎搭建了自己的首个小站，域名为：wang-shuang.cn，后由于未及时续费已废弃。正好，新的一年，新的开始，Hello Hexo！</p><h4 id="建站准备"><a href="#建站准备" class="headerlink" title="建站准备"></a>建站准备</h4><hr><p>域名：flamingow.cn</p><p>HOST：<a href="https://www.aliyun.com/product/swas?spm=5176.15201764.0.dswas_ZjqNavbar_product_detail.69a7778bh1KTbJ">阿里云轻量应用服务器</a> CentOS 7.6</p><p>博客框架：<a href="https://hexo.io/zh-cn/">Hexo</a>（快速、简洁且高效的博客框架）</p><p>博客主题：<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a></p><h4 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h4><hr><p>此处建议参考<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>以及B站大佬<a href="https://www.bilibili.com/video/BV1Yb411a7ty">CodeSheep的建站视频</a></p><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><hr><h5 id="配置Git环境"><a href="#配置Git环境" class="headerlink" title="配置Git环境"></a>配置Git环境</h5><p>1）安装依赖库：</p><pre class="line-numbers language-none"><code class="language-none">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）安装编译工具：</p><pre class="line-numbers language-none"><code class="language-none">yum install gcc perl-ExtUtils-MakeMaker package <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）下载解压最新版：</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/src      #下载目录wget https://www.kernel.org/pub/software/scm/git/git-2.28.0.tar.gz      #下载最新版tar -zxvf git-2.28.0.tar.gz      #解压到当前文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4）安装Git：</p><pre class="line-numbers language-none"><code class="language-none">cd git-2.28.0make prefix=/usr/local/git allmake prefix=/usr/local/git install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5）安装成功，配置Git的环境变量：</p><pre class="line-numbers language-none"><code class="language-none">echo 'export PATH=$PATH:/usr/local/git/bin' &gt;&gt; /etc/bashrcsource /etc/bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6）验证Git安装情况：</p><pre class="line-numbers language-none"><code class="language-none">git --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7）创建Git用户并且修改权限：</p><pre class="line-numbers language-none"><code class="language-none">adduser git     #此处git用户名可自定义passwd gitchmod 740 /etc/sudoersvim /etc/sudoers#进入需编辑文件找到下列代码root    ALL=(ALL)       ALL#在下面加上如下代码git     ALL=(ALL)       ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8）本地使用Gitbash创建密匙：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9）将本地密钥文件id_rsa.pub内容复制到authorized_keys里：</p><pre class="line-numbers language-none"><code class="language-none">su gitmkdir ~/.sshvim ~/.ssh      #在此粘贴赋值内容，完成后保存并退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>10）测试服务器Git是否可以与本地链接：</p><pre class="line-numbers language-none"><code class="language-none">ssh -v git@IP      #在本地GitBash输入该指令，IP为你的服务器IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>11）此时GitBash会提示你输入Git用户密码，输入即可。</p><p>12）开始自动化部署的配置，回到服务器端，创建Git仓库：</p><pre class="line-numbers language-none"><code class="language-none">su root      #切换root用户mkdir /home/hexo      #创建网站的根目录chown git:git -R /home/hexo      #授予权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>13）在 /home/hexo/blog.git 下，有一个自动生成的 hooks 文件夹，我们创建一个新的 git 钩子 post-receive，用于自动部署：</p><pre class="line-numbers language-none"><code class="language-none">vim blog.git/hooks/post-receive#写入如下代码，完成后保存退出#!/bin/sh  git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f   chmod +x /home/git/blog.git/hooks/post-receive     #修改权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>14）以上，Git环境配置完成。</p><h5 id="配置Nginx环境"><a href="#配置Nginx环境" class="headerlink" title="配置Nginx环境"></a>配置Nginx环境</h5><p>这里我采用宝塔进行配置（Linux菜鸟的福音！）</p><blockquote><p>宝塔Linux面板是提升运维效率的服务器管理软件，支持一键LAMP/LNMP/集群/监控/网站/FTP/数据库/JAVA等100多项服务器管理功能。支持的操作系统有CentOS，Ubuntu、Debian、Fedora.</p></blockquote><p>1）在服务器安装宝塔6.9稳定版：</p><pre class="line-numbers language-none"><code class="language-none">cd ~yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）安装完成会后提示你进入宝塔面板主页</p><p>3）在左侧仪表盘中点击【网站】→【添加站点】</p><p>4）添加完成即完成nginx的配置，没错，就是这么简单^^</p><h5 id="配置本地Hexo"><a href="#配置本地Hexo" class="headerlink" title="配置本地Hexo"></a>配置本地Hexo</h5><p>1）在博客根目录_config下添加：</p><pre class="line-numbers language-none"><code class="language-none">deploy:    type: git    repo: root@***(服务器ip,内网外网都行):/home/git/blog.git    #仓库地址    branch: master    #分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><hr><p>🆗一切准备就绪，开始将博客部署至服务器端：</p><pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：此时会要求输入服务器的密码，输入即可</p><p>此时博客算是完美部署，可以在浏览器输入自己的域名或者服务器IP查看效果。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><hr><p>血的教训：如无特殊需求，建议安装过程中所有的安装包采用稳定版</p><p>新工具get：宝塔真的是Linux菜鸟福音，除了能配置web环境外，还有很多实用的功能值得大家探索，将Linux命令可视化简直不要太方便</p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><hr><ul><li><a href="https://blog.csdn.net/weixin_45682081/article/details/105992591">使用宝塔面板一键部署hexo博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery </tag>
            
            <tag> 宝塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/01/hello-world/"/>
      <url>2021/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
